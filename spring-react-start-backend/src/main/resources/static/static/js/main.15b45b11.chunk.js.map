{"version":3,"sources":["serviceWorker.js","store/selectors.js","store/user/selectors.js","store/project/selectors.js","containers/project-board/selectors.js","store/project/actions.js","containers/add-project/actions.js","containers/add-project/reducer.js","containers/project-board/actions.js","containers/project-board/reducer.js","containers/add-project-task/actions.js","containers/add-project-task/reducer.js","containers/reducers.js","store/project/reducer.js","store/user/actions.js","store/user/reducer.js","store/index.js","utils/a11y-utils.js","components/icon/index.jsx","components/button/index.jsx","utils/request-utils.js","containers/user-management/actions.js","containers/header/Header.jsx","containers/app/App.jsx","template.jsx","components/field/index.jsx","components/form-field/index.jsx","containers/add-project/selectors.js","containers/add-project/AddProject.jsx","store/form/constants.js","containers/dashboard/actions.js","containers/dashboard/partials/ProjectItem.jsx","containers/dashboard/partials/CreateProjectButton.jsx","containers/dashboard/Dashboard.jsx","containers/project-board/partials/ProjectTask.jsx","containers/project-board/partials/Backlog.jsx","containers/project-board/ProjectBoard.jsx","containers/add-project-task/selectors.js","containers/add-project-task/AddProjectTask.jsx","containers/home/Home.jsx","containers/user-management/Login.jsx","containers/user-management/Register.jsx","containers/not-found/NotFound.jsx","containers/home/actions.js","Router.jsx","index.js"],"names":["Boolean","window","location","hostname","match","getUi","_ref","ui","getUser","_ref4","user","isUserLoggedIn","createGetSelector","getUsername","getProjectsList","_ref2","project","getProjectBoard","createSelector","projectBoard","getCurrentTaskList","getProjectNotFoundError","receiveProjects","createAction","receiveProject","receiveProjectsTasks","getProjects","dispatch","axios","get","then","response","projectsList","data","catch","e","status","console","error","getProjectTasksById","id","getStore","concat","tasksList","setCurrentProject","initAddProject","routeProps","history","params","find","projectIdentifier","Promise","resolve","currentProject","push","initialState","Immutable","Map","handleActions","Object","defineProperty","state","payload","mergeDeep","setCurrentTaskList","receiveErrorMessage","updateProductTasks","projectNotFound","undefined","initProjectBoard","err","objectSpread","fromJS","_handleActions","merge","setCurrentTask","initAddProjectTask","_match$params","sequence","task","getProjectTask","currentTask","combineReducers","projectTask","reducer_handleActions","update","_ref3","projectList","addProject","i","length","set","receiveUserData","setLoggedIn","user_reducer_handleActions","reducers","rootReducer","projectReducer","form","formReducer","userReducer","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","immutable","compose","applyMiddleware","thunk","composeEnhancers","createStore","createStoreWithMiddleware","keyMap","onKeyUpWrapper","onClick","keycode","event","_len","arguments","otherArgs","Array","_key","keyCode","apply","toConsumableArray","onKeyUpHelper","uuid","Icon","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","prefix","name","title","size","className","style","a11y","role","aria-hidden","sizeClass","classes","classNames","react_default","a","createElement","assign","aria-labelledby","xlinkHref","React","Component","defaultProps","Button","childrenNodes","_childrenNodes","to","icon","iconSize","iconClassName","innerClassName","showIconText","text","type","children","disabled","value","openInNewTab","c--anchor","c--icon-only","innerClass","iconClass","c--has-siblings","textClass","u-visually-hidden","attrs","onKeyUp","components_icon","key","keys","forEach","test","Link","target","setJWTToken","token","keyName","sessionStorage","setItem","defaults","headers","common","decodedToken","jwt_decode","fullName","username","authenticated","removeItem","removeItemFromBrowserStorage","initSession","authorizationToken","auth","getItem","exp","Date","now","validateForm","formValues","isRegister","errors","_error","password","confirmPassword","isEmail","checkLoginStatus","initLogin","initRegister","Header","logout","components_button","data-toggle","data-target","mapStateToProps","createPropsSelector","mapDispatchToProps","connect","App","header_Header","withRouter","template","WrappedComponent","Template","_React$Component","inherits","createClass","_this2","fetchAction","dispatchRouteChange","displayName","getDisplayName","getUniqueId","Field","idForLabel","inputId","isCheckRadio","shouldStackLabelInput","bind","assertThisInitialized","shouldPlaceLabelAtEnd","buildEventHandler","labelPosition","eventHandlerName","customHandler","customEventHandlers","input","_this3","label","hint","caption","shouldShowErrorsInstantly","childDisabled","childChecked","onlyChild","Children","count","newChildren","map","child","idx","childProps","onBlur","onFocus","onChange","onDrop","onDragStart","aria-invalid","aria-required","required","checked","isRequired","cloneElement","metaProps","meta","shouldShowReduxError","touched","active","dirty","reduxFormError","fieldError","c--is-check-radio","c--error","c--required","c--disabled","c--checked","innerClasses","c--stack","labelClasses","c--end","inputClasses","htmlFor","FormField","placeholder","rowClasses","defaultChecked","inputOptions","inputField","es_Field","component","getProject","getCurrentProject","AddProject","onSubmit","createProject","_this$props2","handleSubmit","initialValues","noValidate","form_field","AddProjectForm","reduxForm","post","reject","SubmissionError","initDashboard","ProjectItem","deleteProject","projectName","description","confirm","delete","CreateProjectButton","Fragment","Dashboard","projects","partials_CreateProjectButton","partials_ProjectItem","backlogId","projectTaskId","projectSequence","summary","acceptanceCriteria","priority","priorityClass","priorityString","Backlog","todoTasks","inProgressTasks","doneTasks","ProjectTask","ProjectBoard","projectNotFoundError","partials_Backlog","getCurrentTask","AddProjectTask","addProjectTask","isUpdate","AddProjectTaskForm","validateProjectTaskForm","patch","Home","Login","login","LoginForm","Register","registerUser","RegisterForm","NotFound","initHome","Router","react_redux_es","BrowserRouter","containers_app_App","Switch","Route","exact","path","render","Home_Home","user_management_Login","user_management_Register","dashboard_Dashboard","add_project_AddProject","project_board_ProjectBoard","add_project_task_AddProjectTask","ReactDOM","Router_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2KClBOC,EAAQ,SAAAC,GAAA,OAAAA,EAAEC,IAGVC,EAAU,SAAAC,GAAA,OAAAA,EAAEC,MCCZC,EAAiBC,4BAAkBJ,EAAS,iBAC5CK,EAAcD,4BAAkBJ,EAAS,YCDzCM,EAAkBF,4BFHJ,SAAAG,GAAA,OAAAA,EAAEC,SEGiC,wBCCjDC,EAAkBC,YAAeb,EAAO,SAAAC,GAAA,OAAAA,EAAEa,eAC1CC,EAAqBR,4BAAkBK,EAAiB,aACxDI,EAA0BT,4BAAkBK,EAAiB,mBCD7DK,EAAkBC,YAAa,yBAC/BC,EAAiBD,YAAa,wBAC9BE,EAAuBF,YAAa,+BAGpCG,GAFqBH,YAAa,wBAEpB,kBAAM,SAACI,GAC9BC,IAAMC,IAAI,oBACLC,KAAK,SAACC,GAAD,OAAcJ,EAASL,EAAgB,CAACU,aAAcD,EAASE,UACpEC,MAAM,SAACC,GAAD,OAA6B,MAAtBA,EAAEJ,SAASK,QAAkBC,QAAQC,MAAM,sBAiBpDC,EAAsB,SAACC,GAAD,OAAQ,SAACb,EAAUc,GAClD,OAAOb,IAAMC,IAAN,gBAAAa,OAA0BF,IAC5BV,KAAK,SAACC,GAAD,OAAcJ,EAASF,EAAqB,CAACkB,UAAWZ,EAASE,KAAMO,YCzBxEI,EAAoBrB,YAAa,2BAEjCsB,EAAiB,SAACC,GAAD,OAAgB,SAACnB,EAAUc,GAAa,IDO3CD,ECNhBpC,EAAkB0C,EAAlB1C,MAAO2C,EAAWD,EAAXC,QASd,OARKpC,EAAe8B,KAGhBrC,EAAM4C,OAAOR,IACTb,GDCea,ECDKpC,EAAM4C,OAAOR,GDCX,SAACb,EAAUc,GACzC,IACMzB,EADWF,EAAgB2B,KACRQ,KAAK,SAACjC,GAAD,OAAaA,EAAQkC,oBAAsBV,IACzE,OAAIxB,EACO,IAAImC,QAAQ,SAACC,GAAD,OAAaA,EAAQpC,KAEjCY,IAAMC,IAAN,gBAAAa,OAA0BF,IAC5BV,KAAK,SAACC,GAEH,OADAJ,EAASH,EAAeO,EAASE,OAC1BF,EAASE,UCTfH,KAAK,SAACd,GAAD,OAAaW,EAASiB,EAAkB,CAACS,eAAgBrC,OAC9DkB,MAAM,SAACC,GAAD,OAAOY,EAAQO,KAAK,gBALnCP,EAAQO,KAAK,UAOVH,QAAQC,YCfbG,EAAeC,IAAUC,MAEhBC,cAAcC,OAAAC,EAAA,EAAAD,CAAA,GACxBf,EAAoB,SAACiB,EAADvD,GAAsB,IAAbwD,EAAaxD,EAAbwD,QAC1B,OAAOD,EAAME,UAAUD,KAE5BP,GCJUS,EAAqBzC,YAAa,6BAClC0C,EAAsB1C,YAAa,yBAEnC2C,EAAqB,SAAC1B,GAAD,OAAQ,SAACb,GAEvC,OADAA,EAASsC,EAAoB,CAACE,qBAAiBC,KACxCzC,EAASY,EAAoBC,IAC/BV,KAAK,SAAAxB,GAAA,IAAEwD,EAAFxD,EAAEwD,QAAF,OAAenC,EAASqC,EAAmBF,QAG5CO,EAAmB,SAACvB,GAAD,OAAgB,SAACnB,EAAUc,GAAa,IAC7DrC,EAAkB0C,EAAlB1C,MAAO2C,EAAWD,EAAXC,QASd,OARKpC,EAAe8B,KAGhBrC,EAAM4C,OAAOR,IAAMb,EAASuC,EAAmB9D,EAAM4C,OAAOR,KAC3DN,MAAM,SAACoC,GACJ3C,EAASsC,EAAoBN,OAAAY,EAAA,EAAAZ,CAAA,GAAIW,EAAIvC,SAASE,UAJlDc,EAAQO,KAAK,UAOVH,QAAQC,YCrBbG,EAAeiB,YAAO,CACxB7B,UAAW,KAGAe,eAAae,EAAA,GAAAd,OAAAC,EAAA,EAAAD,CAAAc,EACvBT,EAAqB,SAACH,EAADvD,GAAA,IAASwD,EAATxD,EAASwD,QAAT,OAAsBD,EAAMa,MAAM,CAAC/B,UAAWmB,EAAQnB,cADpDgB,OAAAC,EAAA,EAAAD,CAAAc,EAEvBR,EAAsB,SAACJ,EAAD9C,GAAA,IAAS+C,EAAT/C,EAAS+C,QAAT,OAAsBD,EAAMa,MAAMZ,KAFjCW,GAGzBlB,GCJUoB,EAAiBpD,YAAa,wBAE9BqD,EAAqB,SAAC9B,GAAD,OAAgB,SAACnB,EAAUc,GAAa,IAC/DrC,EAAkB0C,EAAlB1C,MAAO2C,EAAWD,EAAXC,QACd,GAAKpC,EAAe8B,KAEb,KAAAoC,EACoBzE,EAAM4C,OAAtBR,EADJqC,EACIrC,GAAIsC,EADRD,EACQC,SACXtC,GAAMsC,GACFnD,ELmBkB,SAACa,EAAIsC,GAAL,OAAkB,SAACnD,EAAUc,GACvD,IACMsC,EADY3D,EAAmBqB,KACdQ,KAAK,SAAC8B,GAAD,OAAUA,EAAK7B,oBAAsBV,IACjE,OAAIuC,EACO,IAAI5B,QAAQ,SAACC,GAAD,OAAaA,EAAQ2B,KAEjCpD,EAASY,EAAoBC,IAC/BV,KAAK,SAACC,GAGH,OAFyBA,EAAS+B,QAAQnB,UACLM,KAAK,SAAC8B,GAAD,OAAUA,EAAK7B,oBAAsBV,OK5B1EwC,CAAexC,IACnBV,KAAK,SAACiD,GAAD,OAAUpD,EAASgD,EAAe,CAACM,YAAaF,OACrD7C,MAAM,SAACC,GAAD,OAAOY,EAAQO,KAAK,qBANnCP,EAAQO,KAAK,UAQjB,OAAOH,QAAQC,YCjBbG,EAAeC,IAAUC,MAEhBC,cAAcC,OAAAC,EAAA,EAAAD,CAAA,GACxBgB,EAAiB,SAACd,EAADvD,GAAsB,IAAbwD,EAAaxD,EAAbwD,QACvB,OAAOD,EAAME,UAAUD,KAE5BP,GCJY2B,cAAgB,CAC3BlE,UACAG,eACAgE,gBCJE5B,EAAeiB,YAAO,CACxBxC,aAAc,KAGH0B,eAAa0B,EAAA,GAAAzB,OAAAC,EAAA,EAAAD,CAACyB,EACxB9D,EAAkB,SAACuC,EAADvD,GAAsB,IAAbwD,EAAaxD,EAAbwD,QACxB,OAAOD,EAAMa,MAAMZ,KAFCH,OAAAC,EAAA,EAAAD,CAACyB,EAIxB5D,EAAiB,SAACqC,EAAD9C,GAAsB,IAAb+C,EAAa/C,EAAb+C,QACvB,OAAOD,EAAMwB,OAAO,eAAgB,SAAArD,GAAY,OAAIA,EAAasB,KAAbK,OAAAY,EAAA,EAAAZ,CAAA,GAAsBG,QALtDH,OAAAC,EAAA,EAAAD,CAACyB,EAOxB3D,EAAuB,SAACoC,EAADyB,GAGpB,IAH0C,IAAbxB,EAAawB,EAAbxB,QACvByB,EAAc1B,EAAMhC,IAAI,gBAC1B2D,GAAa,EACRC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,IAAMzE,EAAUuE,EAAYE,GAC5B,GAAIzE,EAAQkC,oBAAsBY,EAAQtB,GAAI,CAC1CxB,EAAQ2B,UAAYmB,EAAQnB,UAC5B6C,GAAa,EACb,OAIR,OAAIA,EACO3B,EAAMwB,OAAO,eAAgB,SAAArD,GAAY,OAAIA,EAAasB,KAAK,CAACJ,kBAAmBY,EAAQtB,GAAIG,UAAWmB,EAAQnB,cAEtHkB,EAAM8B,IAAI,eAAgBJ,KAtBbH,GAwBzB7B,GC/BUqC,EAAkBrE,YAAa,qBAC/BsE,GAActE,YAAa,0BCElCgC,GAAeC,IAAUC,MAEhBC,gBAAaoC,EAAA,GAAAnC,OAAAC,EAAA,EAAAD,CAACmC,EACxBF,EAAkB,SAAC/B,EAADvD,GAAsB,IAAbwD,EAAaxD,EAAbwD,QACxB,OAAOD,EAAMa,MAAMZ,KAFCH,OAAAC,EAAA,EAAAD,CAACmC,EAIxBD,GAAc,SAAChC,EAAD9C,GAAsB,IAAb+C,EAAa/C,EAAb+C,QACpB,OAAOD,EAAMa,MAAMZ,KALCgC,GAOzBvC,ICLGwC,GAAWb,YAAgB,CAC7B3E,GAAIyF,EACJhF,QAASiF,EACTC,KAAMC,IACNzF,KAAM0F,KAaKC,IAVUpG,OAAOqG,qCACpBrG,OAAOqG,qCAAqC,CAC1CC,UAAW,CACPC,UAAWhD,OAGjBiD,KACuCC,YAAgBC,KAAjCC,CAAyCC,IAC7DC,CAA0Bf,0ICnB3BgB,GAWF,GAcEC,GAAiB,SAACC,EAASC,GAAV,OAAsB,SAACC,GAAD,QAAAC,EAAAC,UAAA3B,OAAW4B,EAAX,IAAAC,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAWF,EAAXE,EAAA,GAAAH,UAAAG,GAAA,OAVvB,SAACL,EAAOF,EAASC,GAA4B,IAAnBI,EAAmBD,UAAA3B,OAAA,QAAAtB,IAAAiD,UAAA,GAAAA,UAAA,GAAP,GAE3DF,EAAMM,UAAYP,GAAWC,EAAMM,UAAYV,IACxB,oBAAZE,GACPA,EAAOS,WAAP,GAAQP,GAARzE,OAAAiB,OAAAgE,GAAA,EAAAhE,CAAkB2D,KAM+CM,CAAcT,EAAOF,EAASC,EAASI,eC1B9GO,GAAQ,WACV,IAAIpC,EAAI,EACR,OAAO,WACH,OAAOA,KAHD,GAWRqC,eACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAJ,IACfE,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAAmE,GAAAO,KAAAH,KAAMH,KAEDvF,GAAL,QAAAE,OAAkBmF,MAHHG,0EAMV,IAAAM,EAQDJ,KAAKH,MANLQ,EAFCD,EAEDC,OACAC,EAHCF,EAGDE,KACAC,EAJCH,EAIDG,MACAC,EALCJ,EAKDI,KACAC,EANCL,EAMDK,UACAC,EAPCN,EAODM,MAGEC,EAAQJ,EAAM/C,OAAU,CAACoD,KAAM,OAAS,CAACC,cAAe,QACxDC,EAAS,MAAAtG,OAASgG,GAElBO,EAAUC,KAAW,SAADvF,OAAAC,EAAA,EAAAD,CAAA,GACrBqF,IAAcN,GAChBC,GAEH,OACIQ,EAAAC,EAAAC,cAAA,MAAA1F,OAAA2F,OAAA,GAAST,EAAT,CACIF,UAAWM,EACXR,MAAOA,EACPc,kBAAiBrB,KAAK1F,GACtBoG,MAAOA,IAEPO,EAAAC,EAAAC,cAAA,SAAO7G,GAAI0F,KAAK1F,IAAKiG,GACrBU,EAAAC,EAAAC,cAAA,OAAKP,KAAK,eAAeU,UAAS,IAAA9G,OAAM6F,EAAN,KAAA7F,OAAgB8F,aAhC/CiB,IAAMC,WAsCzB5B,GAAK6B,aAAe,CAChBnB,KAAM,GACNC,MAAO,GACPF,OAAQ,KACRK,MAAO,IAwCId,UCpFT8B,GAAS,SAAC7B,GAAU,IA6ClB8B,EAUOC,EAnDPC,EAsBAhC,EAtBAgC,GACAC,EAqBAjC,EArBAiC,KACAC,EAoBAlC,EApBAkC,SACAC,EAmBAnC,EAnBAmC,cACAC,EAkBApC,EAlBAoC,eACAC,EAiBArC,EAjBAqC,aACAC,EAgBAtC,EAhBAsC,KACA5B,EAeAV,EAfAU,MACA6B,EAcAvC,EAdAuC,KAGA9H,EAWAuF,EAXAvF,GACA+H,EAUAxC,EAVAwC,SACA5B,EASAZ,EATAY,UACA6B,EAQAzC,EARAyC,SACAhC,EAOAT,EAPAS,KACAiC,EAMA1C,EANA0C,MACA3B,EAKAf,EALAe,KACA4B,EAIA3C,EAJA2C,aAGAzD,EACAc,EADAd,QAGEgC,EAAUC,KAAW,WAAY,CACnCyB,cAAeZ,EACfa,iBAAkBZ,IAASO,GAC5B5B,GACGkC,EAAa3B,KAAW,kBAAmBiB,GAC3CW,EAAY5B,KAAW,iBAAkBgB,EAAe,CAC1Da,kBAAmBR,GAAa9B,GAAS2B,IAEvCY,EAAY9B,KAAW,iBAAkB,CAC3C+B,qBAAsBb,IAEpBc,EAAQ,CACVnB,KAAIvH,KAAIgI,WAAUhC,OAAMiC,QAAO3B,OAAM7B,UACrCkE,QAASnE,GAAeC,GACxB0B,UAAWM,GAKXe,GACAH,EAAgB,CACZV,EAAAC,EAAAC,cAAC+B,GAAD,CAAMzC,UAAWmC,EAAWpC,KAAMuB,EAAUzB,KAAMwB,EAAMqB,IAAI,aAC5D5C,GAASU,EAAAC,EAAAC,cAAA,QAAMV,UAAWqC,EAAWK,IAAI,aAAa5C,IAGlC,kBAAb8B,EACPV,EAAcvG,KAAKiH,IAEnBT,EAAAD,GAAcvG,KAAdoE,MAAAoC,EAAAnG,OAAAgE,GAAA,EAAAhE,CACQ4G,GAAY,MAIxBV,EAAgBQ,GAAQE,EAU5B,OANA5G,OAAO2H,KAAKvD,GAAOwD,QAAQ,SAACF,GACpB,gBAAgBG,KAAKH,KACrBH,EAAMG,GAAOtD,EAAMsD,MAIvBtB,EAEIZ,EAAAC,EAAAC,cAACoC,GAAA,EAAD9H,OAAA2F,OAAA,GAAU4B,EAAV,CAAiBQ,OAAQhB,EAAe,SAAW,KAC/CvB,EAAAC,EAAAC,cAAA,OAAKV,UAAWkC,GAAahB,IAKjCV,EAAAC,EAAAC,cAAA,SAAA1F,OAAA2F,OAAA,GAAY4B,EAAZ,CAAmBZ,KAAMA,IACrBnB,EAAAC,EAAAC,cAAA,OAAKV,UAAWkC,GAAahB,KAM7CD,GAAOD,aAAe,CAClBW,KAAM,UAwGKV,mDCzLF+B,GAAc,SAACC,GAAD,OAAW,SAACjK,GACnC,GAAIiK,EAAO,CATkBC,EANX,WAMoBpB,EAUKmB,EAT3C3L,OAAO6L,eAAeC,QAAQF,EAASpB,GAUnC7I,IAAMoK,SAASC,QAAQC,OAAvB,cAAiDN,EAEjD,IAAMO,EAAeC,KAAWR,GAChCjK,EAASiE,EAAgB,CAACyG,SAAUF,EAAaE,SAAUC,SAAUH,EAAaG,YAClF3K,EAASkE,GAAY,CAAC0G,eAAe,UAXR,SAACV,GAClC5L,OAAO6L,eAAeU,WAAWX,GAY7BY,CAvBc,YAwBd9K,EAASkE,GAAY,CAAC0G,eAAe,YAC9B3K,IAAMoK,SAASC,QAAQC,OAAvB,cAnBiB,IAACL,EAASpB,IA8B7BiC,GAAc,kBAAM,SAAC/K,GAC9B,IAnC+BkK,EA2BXc,EAQdC,GAnCyBf,EAFb,WAGX5L,OAAO6L,eAAee,QAAQhB,IAwCrC,QALMe,IATcD,EASSC,EARfR,KAAWO,GAAlBG,IAEKC,KAAKC,MAAQ,OAMcpL,IAAMoK,SAASC,QAAQC,OAAvB,cACnCvK,EAASgK,MACFiB,GAAQhL,IAAMoK,SAASC,QAAQC,OAAvB,gBAAmDU,GAClEjL,EAASgK,GAAYiB,IAElBzJ,QAAQC,YCzCb6J,GAAe,SAACC,EAAYC,GAC9B,IAAMC,EAAS,GACf,IAAKF,EACD,MAAO,CACHG,OAAQ,oBAJ6B,IASzCf,EAIAY,EAJAZ,SACAgB,EAGAJ,EAHAI,SACAC,EAEAL,EAFAK,gBACAlB,EACAa,EADAb,SAyBJ,OAtBKC,EAEOkB,KAAQlB,KAChBc,EAAOd,SAAW,4BAFlBc,EAAOd,SAAW,4BAKjBgB,EAEMA,EAAS5H,OAAS,IACzB0H,EAAOE,SAAW,8CAFlBF,EAAOE,SAAW,uBAKlBH,IAAeI,EACfH,EAAOG,gBAAkB,+BAClBJ,GAAcI,IAAoBD,IACzCF,EAAOG,gBAAkB,wBAGzBJ,IAAed,IACfe,EAAOf,SAAW,oBAGfe,GAGLK,GAAmB,SAAC1K,GAAD,OAAa,SAACpB,EAAUc,GAC7C,GAAI9B,EAAe8B,KAEf,OADAM,EAAQO,KAAK,cACNH,QAAQC,YAIVsK,GAAY,SAAApN,GAAA,IAAEyC,EAAFzC,EAAEyC,QAAF,OAAe,SAACpB,GAErC,OADAA,EAAS8L,GAAiB1K,IACnBI,QAAQC,YAGNuK,GAAe,SAAA5M,GAAA,IAAEgC,EAAFhC,EAAEgC,QAAF,OAAe,SAACpB,GAExC,OADAA,EAAS8L,GAAiB1K,IACnBI,QAAQC,YClDbwK,yLACO,IAAAtF,EACsCJ,KAAKH,MAAzCuE,EADFhE,EACEgE,SAAU3L,EADZ2H,EACY3H,eAAgBkN,EAD5BvF,EAC4BuF,OACjC,OACI1E,EAAAC,EAAAC,cAAA,OAAKV,UAAU,gEACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM9C,UAAU,eAAeoB,GAAG,KAAlC,oCACAZ,EAAAC,EAAAC,cAACyE,GAAD,CAAQnF,UAAU,iBAAiB2B,KAAK,SAASyD,cAAY,WAAWC,cAAY,eAChF7E,EAAAC,EAAAC,cAAA,QAAMV,UAAU,yBAGpBQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,2BAA2BnG,GAAG,cACzC2G,EAAAC,EAAAC,cAAA,MAAIV,UAAU,sBACVQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,YACVQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM9C,UAAU,WAAWoB,GAAG,cAA9B,eAIRZ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,sBACVQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,YACThI,EACGwI,EAAAC,EAAAC,cAAA,OAAKV,UAAU,oCAAf,WAA2D2D,GAE3DnD,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM9C,UAAU,YAAYoB,GAAG,iBAA/B,YAGRZ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,YACThI,EACGwI,EAAAC,EAAAC,cAACyE,GAAD,CAAQnF,UAAU,WAAWoB,GAAG,IAAI9C,QAAS,WAAQ4G,MAArD,UAEA1E,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM9C,UAAU,WAAWoB,GAAG,cAA9B,qBA9BfL,aA+CfuE,GAAkBC,8BAAoB,CACxC5B,SAAUzL,EACVF,mBAGEwN,GAAqB,CACvBN,OD6BkB,kBAAM,SAAClM,GACzBA,EAASgK,SC3BEyC,gBAAQH,GAAiBE,GAAzBC,CAA6CR,IC1DtDS,yLAEE,OACIlF,EAAAC,EAAAC,cAAA,OAAKV,UAAU,SACXQ,EAAAC,EAAAC,cAACiF,GAAD,MACAnF,EAAAC,EAAAC,cAAA,QAAM7G,GAAG,WAAWmG,UAAU,qBAAqBG,KAAK,QACnDZ,KAAKH,MAAMwC,kBANdb,aAiBH6E,gBAAWF,uBCyBXG,GAzCE,SAACC,GAAqB,IAC7BC,EAD6B,SAAAC,GAE/B,SAAAD,EAAY3G,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAwG,IACf1G,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAA+K,GAAArG,KAAAH,KAAMH,KAED0G,iBAAmBA,EAHTzG,EAFY,OAAArE,OAAAiL,GAAA,EAAAjL,CAAA+K,EAAAC,GAAAhL,OAAAkL,GAAA,EAAAlL,CAAA+K,EAAA,EAAArD,IAAA,sBAAAZ,MAAA,SAAAnK,GAQuB,IAAAwO,EAAA5G,KAAjC6G,EAAiCzO,EAAjCyO,YAAapN,EAAoBrB,EAApBqB,SAAUoB,EAAUzC,EAAVyC,QACxCmF,KAAKH,MAAM2E,YAAY3J,GAClBjB,KAAK,WACEiN,GACApN,EAASoN,EAAYD,EAAK/G,YAZX,CAAAsD,IAAA,qBAAAZ,MAAA,WAkB3BvC,KAAK8G,oBAAoB9G,KAAKH,SAlBH,CAAAsD,IAAA,SAAAZ,MAAA,WAsB3B,OAAQtB,EAAAC,EAAAC,cAACoF,EAAqBvG,KAAKH,WAtBR2G,EAAA,CACZjF,IAAMC,WAwB7BgF,EAASD,iBAAmBA,EAC5BC,EAASO,YAAT,YAAAvM,OA9BmB,SAAC+L,GACpB,OAAOA,EAAiBQ,aAAeR,EAAiBjG,MAAQ,YA6B7B0G,CAAeT,GAAlD,KAQA,IAAMN,EAAqB,CACvBzB,gBAGJ,OAAO0B,aAAQ,KAAMD,EAAdC,CAAkCM,cC5CvCS,GAAe,WACjB,IAAI1J,EAAI,EAER,OAAO,WACH,eAAA/C,OAAgB+C,MAJH,GAkSN2J,eA5QX,SAAAA,EAAYrH,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAkH,GACfpH,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAAyL,GAAA/G,KAAAH,KAAMH,IAEFA,EAAMsH,WACNrH,EAAKsH,QAAUvH,EAAMsH,WAErBrH,EAAKsH,QAAUH,KAGnBnH,EAAKuH,cAAe,EACpBvH,EAAKwH,sBAAwBxH,EAAKwH,sBAAsBC,KAA3B9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAC7BA,EAAK2H,sBAAwB3H,EAAK2H,sBAAsBF,KAA3B9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAC7BA,EAAK4H,kBAAoB5H,EAAK4H,kBAAkBH,KAAvB9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAZVA,yFAgBf,OAAKE,KAAKH,MAAM8H,cAGwB,QAA7B3H,KAAKH,MAAM8H,eAFV3H,KAAKqH,6DAOjB,OAAKrH,KAAKH,MAAM8H,cAGwB,QAA7B3H,KAAKH,MAAM8H,cAFX3H,KAAKqH,uDAMFO,GAAkB,IAAAhB,EAAA5G,KAC1B6H,EAAgB7H,KAAKH,MAAMiI,oBAAoBF,GAGrD,OAFc5H,KAAKH,MAAMkI,MAGW,oBAAlBF,EAA+B,SAAC5N,GAC1C2M,EAAK/G,MAAMkI,MAAMH,GAAkB3N,GACnC4N,EAAc5N,IACd+F,KAAKH,MAAMkI,MAAMH,GAElBC,mCAGF,IAAAG,EAAAhI,KAAAI,EAUDJ,KAAKH,MARLoI,EAFC7H,EAED6H,MACAC,EAHC9H,EAGD8H,KACA9N,EAJCgG,EAIDhG,MACA+N,EALC/H,EAKD+H,QACA1H,EANCL,EAMDK,UACA4B,EAPCjC,EAODiC,SACA+F,EARChI,EAQDgI,0BACAN,EATC1H,EASD0H,oBAGAO,GAAgB,EAChBC,GAAe,EACbC,EAA+C,IAAnChH,IAAMiH,SAASC,MAAMpG,GAEjCqG,EAAcnH,IAAMiH,SAASG,IAAItG,EAAU,SAACuG,EAAOC,GACrD,IAAIC,EAAa,GAyDjB,OAtDmB,UAAfF,EAAMxG,MACS,WAAfwG,EAAMxG,MACS,aAAfwG,EAAMxG,MACe,mBAAdwG,EAAMxG,QAIb0G,EAAUrN,OAAAY,EAAA,EAAAZ,CAAA,GAAOuM,EAAKnI,MAAMkI,QAG5BD,IAKAgB,EAAWC,OAASf,EAAKN,kBAAkB,SAAUoB,GACrDA,EAAWE,QAAUhB,EAAKN,kBAAkB,UAAWoB,GACvDA,EAAWG,SAAWjB,EAAKN,kBAAkB,WAAYoB,GACzDA,EAAWI,OAASlB,EAAKN,kBAAkB,SAAUoB,GACrDA,EAAWK,YAAcnB,EAAKN,kBAAkB,cAAeoB,IAGnEA,EAAUrN,OAAAY,EAAA,EAAAZ,CAAA,GACHqN,EADG,CAENM,iBAAkBhP,EAClBiP,gBAAiBT,EAAM/I,MAAMyJ,UAC1BV,EAAM/I,OAGT+I,EAAM/I,MAAMyC,WACZ+F,GAAgB,GAGhBS,EAAWS,UACXjB,GAAe,GAGflO,IACA0O,EAAWrI,UAAYO,KAAW4H,EAAM/I,MAAMY,UAAW,iBAIjD,IAARoI,IACAC,EAAWxO,GAAK0N,EAAKZ,UAGrBmB,GAAmC,UAArBK,EAAM/I,MAAMuC,MAAyC,aAArBwG,EAAM/I,MAAMuC,OAC1D4F,EAAKX,cAAe,GAGpBuB,EAAM/I,MAAMyJ,WACZtB,EAAKwB,YAAa,GAGfjI,IAAMkI,aAAab,EAAOE,KAG/BY,EAAY1J,KAAKH,MAAM8J,KAEvBC,EAAuBF,IAAcA,EAAUG,UAAYH,EAAUI,QAAWJ,EAAUK,OAAS3B,GACnG4B,EAAiBN,GAAaE,GAAwBF,EAAUtP,MAChE6P,EAAa7P,GAAS4P,EAEtBjJ,EAAUC,KAAW,UAAW,CAClCkJ,oBAAqBlK,KAAKqH,aAC1B8C,WAAYF,EACZG,cAAepK,KAAKwJ,WACpBa,cAAehC,EACfiC,aAAchC,GACf7H,GAEG8J,EAAevJ,KAAW,iBAAkB,CAC9CwJ,WAAYxK,KAAKsH,0BAGfmD,EAAezJ,KAAW,sBAAuB,CACnD0J,SAAU1K,KAAKyH,0BAGbkD,EAAe3J,KAAW,kBAEhC,OACIC,EAAAC,EAAAC,cAAA,OAAKV,UAAWM,GACZE,EAAAC,EAAAC,cAAA,OAAKV,UAAW8J,GACXtC,GACGhH,EAAAC,EAAAC,cAAA,OAAKV,UAAWgK,GACZxJ,EAAAC,EAAAC,cAAA,SACIV,UAAU,iBACVmK,QAAS5K,KAAKoH,SAEba,GAGJC,GACGjH,EAAAC,EAAAC,cAAA,OAAKV,UAAU,iBACVyH,IAMjBjH,EAAAC,EAAAC,cAAA,OAAKV,UAAWkK,GACXjC,IAIRuB,GACGhJ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,kBACVwJ,GAIR9B,GACGlH,EAAAC,EAAAC,cAAA,OAAKV,UAAU,oBACV0H,WAnLL5G,IAAMC,WCuBXqJ,GA1CG,SAAAzS,GAA+F,IAA7F6P,EAA6F7P,EAA7F6P,MAAO7F,EAAsFhK,EAAtFgK,KAAM9B,EAAgFlI,EAAhFkI,KAAMwK,EAA0E1S,EAA1E0S,YAAa/J,EAA6D3I,EAA7D2I,QAASgK,EAAoD3S,EAApD2S,WAAYC,EAAwC5S,EAAxC4S,eAAgB1I,EAAwBlK,EAAxBkK,SAAUD,EAAcjK,EAAdiK,SACzF4I,EAAe,CACjB7I,OACA0I,cACAE,iBACA1I,YAGA4I,EAAajK,EAAAC,EAAAC,cAAA,QAAA1F,OAAA2F,OAAA,GAAW6J,EAAX,CAAyBxK,UAAU,kCAOpD,MANa,aAAT2B,EACA8I,EAAajK,EAAAC,EAAAC,cAAA,WAAA1F,OAAA2F,OAAA,GAAc6J,EAAd,CAA4BxK,UAAU,kCACnC,WAAT2B,IACP8I,EAAa7I,GAIbpB,EAAAC,EAAAC,cAAA,OAAKV,UAAS,gBAAAjG,OAAkBuQ,IAC5B9J,EAAAC,EAAAC,cAACgK,GAAA,EAAD,CACI1K,UAAWM,EACXT,KAAMA,EACN2H,MAAOA,EACP7F,KAAMA,EACNgJ,UAAWlE,IAEVgE,KCzBJG,GAAarS,YAAeb,EAAO,SAAAC,GAAA,OAAAA,EAAEU,UACrCwS,GAAoB5S,4BAAkB2S,GAAY,kBCSzDE,eACF,SAAAA,EAAY1L,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAuL,IACfzL,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAA8P,GAAApL,KAAAH,KAAMH,KAED2L,SAAW1L,EAAK0L,SAASjE,KAAd9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAHDA,wFAOfE,KAAKH,MAAMnF,kBAAkB,CAACS,oBAAgBe,qCAGzC8I,GAAY,IAAA5E,EACgBJ,KAAKH,MAA/BhF,EADUuF,EACVvF,QACP,OAAO4Q,EAFUrL,EACDqL,eACKzG,EAAYnK,oCAG5B,IAAA6Q,EACwC1L,KAAKH,MAA3CzF,EADFsR,EACEtR,MAAOuR,EADTD,EACSC,aAAcC,EADvBF,EACuBE,cAC5B,OACI3K,EAAAC,EAAAC,cAAA,OAAKV,UAAU,iBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBAAd,uBACAQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAM7G,GCxCF,mBDwCwBkR,SAAUG,EAAa3L,KAAKwL,UAAWK,YAAY,GAC1EzR,GACG6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sDACVrG,GAGT6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO0I,YAAY,2BAA2B7C,MAAM,qBAAqB3H,KAAK,iBAElGW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAWxJ,SAA4B,OAAlBsJ,EAAwBxJ,KAAK,OAAO0I,YAAY,iCAAiC7C,MAAM,2BAA2B3H,KAAK,uBAEhJW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,WAAW0I,YAAY,kCAAkC7C,MAAM,4BAA4B3H,KAAK,iBAEpHW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO0I,YAAY,yBAAyB7C,MAAM,mBAAmB3H,KAAK,gBAE9FW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO0I,YAAY,uBAAuB7C,MAAM,iBAAiB3H,KAAK,cAG1FW,EAAAC,EAAAC,cAACyE,GAAD,CAAQxD,KAAK,SAAS3B,UAAU,kCAAhC,sBA/CPe,aAiEnBuK,GAAiBC,aAAU,CAC7BhO,KCjF4B,oBDgFTgO,CAEpBT,IAEGxF,GAAkBC,8BAAoB,CACxC4F,cAAeN,KAGbrF,GAAqB,CACvBwF,ctBlEyB,SAACzG,EAAYnK,GAAb,OAAyB,SAACpB,GACnD,OAAKgC,OAAO2H,KAAK4B,GAAYxH,OAGtB9D,IAAMuS,KAAK,eAAgBjH,GAC7BpL,KAAK,kBAAMiB,EAAQO,KAAK,gBACxBpB,MAAM,SAACoC,GACJ,OAAOnB,QAAQiR,OAAO,IAAIC,IAAJ1Q,OAAAY,EAAA,EAAAZ,CAAA,GAAwBW,EAAIvC,SAASE,UALxDkB,QAAQiR,OAAO,IAAIC,IAAgB,CAAChH,OAAQ,wBsBiEvDzK,qBAGW4L,MAASJ,aAAQH,GAAiBE,GAAzBC,CAA6C6F,KExFxDK,GAAgB,SAAAhU,GAAA,IAAGyC,EAAHzC,EAAGyC,QAAH,OAAiB,SAACpB,EAAUc,GACrD,OAAK9B,EAAe8B,KAIbd,EAASD,MAHZqB,EAAQO,KAAK,UACNH,QAAQC,aCCjBmR,yLACO,IAAAjM,EAC4BJ,KAAKH,MAA/B/G,EADFsH,EACEtH,QAASwT,EADXlM,EACWkM,cAChB,OACIrL,EAAAC,EAAAC,cAAA,OAAKV,UAAU,4BACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,gCACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,SACXQ,EAAAC,EAAAC,cAAA,QAAMV,UAAU,WAAW3H,EAAQkC,oBAEvCiG,EAAAC,EAAAC,cAAA,OAAKV,UAAU,2BACXQ,EAAAC,EAAAC,cAAA,UAAKrI,EAAQyT,aACbtL,EAAAC,EAAAC,cAAA,SAAIrI,EAAQ0T,cAEhBvL,EAAAC,EAAAC,cAAA,OAAKV,UAAU,8BACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,cACVQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAE,gBAAArH,OAAkB1B,EAAQkC,oBAC9BiG,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBACVQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,6BAAb,oBAGRQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAE,eAAArH,OAAiB1B,EAAQkC,oBAC7BiG,EAAAC,EAAAC,cAAA,MAAIV,UAAU,0BACVQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,mBAAb,yBAGRQ,EAAAC,EAAAC,cAACyE,GAAD,CAAQ7G,QAAS,kBAAMuN,EAAcxT,EAAQkC,qBACzCiG,EAAAC,EAAAC,cAAA,MAAIV,UAAU,0BACVQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,2BAAb,gCA5Bde,aA6CpByE,GAAqB,CACvBqG,cD1CyB,SAAChS,GAAD,OAAQ,SAACb,GAClC,GAAI1B,OAAO0U,QAAQ,iBACf,OAAO/S,IAAMgT,OAAN,gBAAAlS,OAA6BF,IAC/BV,KAAK,kBAAMH,EAASD,UC0ClB0M,gBAAQ,KAAMD,GAAdC,CAAkCmG,IC/ClCM,GARa,WACxB,OACI1L,EAAAC,EAAAC,cAACF,EAAAC,EAAM0L,SAAP,KACI3L,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAG,cAAcpB,UAAU,+CAAjC,sBCKNoM,yLACO,IACGC,EAAa9M,KAAKH,MAAlBiN,SACR,OACI7L,EAAAC,EAAAC,cAAA,OAAKV,UAAU,wBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBAAd,YACAQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4L,GAAD,MACA9L,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACC2L,EAASnE,IAAI,SAAC7P,EAAS+P,GAAV,OAAkB5H,EAAAC,EAAAC,cAAC6L,GAAD,CAAa7J,IAAK0F,EAAK/P,QAASA,iBAbpE0I,aA0BlBuE,GAAkBC,8BAAoB,CACxC8G,SAAUlU,IAGC0N,MAASJ,aAAQH,GAARG,CAAyB2G,KCK3C5G,GAAqB,CACvBqG,c1BlByB,SAACW,EAAWC,GAAZ,OAA8B,SAACzT,GACxD,GAAI1B,OAAO0U,QAAQ,iBACf,OAAO/S,IAAMgT,OAAN,gBAAAlS,OAA6ByS,EAA7B,KAAAzS,OAA0C0S,IAC5CtT,KAAK,kBAAMH,EAASuC,EAAmBiR,S0BkBrC/G,gBAAQ,KAAMD,GAAdC,CAzCI,SAAA9N,GAAgG,IAA9F+U,EAA8F/U,EAA9F+U,gBAAiBC,EAA6EhV,EAA7EgV,QAASC,EAAoEjV,EAApEiV,mBAAoBC,EAAgDlV,EAAhDkV,SAAUhB,EAAsClU,EAAtCkU,cAAetR,EAAuB5C,EAAvB4C,kBACpFuS,EAAgB,GAChBC,EAAiB,GAWrB,OAViB,IAAbF,GACAC,EAAgB,uBAChBC,EAAiB,QACG,IAAbF,GACPC,EAAgB,wBAChBC,EAAiB,UACG,IAAbF,IACPC,EAAgB,qBAChBC,EAAiB,OAGjBvM,EAAAC,EAAAC,cAAA,OAAKV,UAAU,kBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAS,4BAAAjG,OAA8B+S,IAA5C,OAAkEJ,EAAlE,iBAAiGK,GACjGvM,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sBACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,cAAc2M,GAC5BnM,EAAAC,EAAAC,cAAA,KAAGV,UAAU,4BAA4B4M,GACzCpM,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAE,mBAAArH,OAAqBQ,EAArB,KAAAR,OAA0C2S,GAAmB1M,UAAU,mBAA/E,iBACAQ,EAAAC,EAAAC,cAACyE,GAAD,CAAQ7G,QAAS,WAAQuN,EAActR,EAAmBmS,IAAoB1M,UAAU,uBAAxF,eCwCLgN,yLAhEF,IACEhT,EAAauF,KAAKH,MAAlBpF,UACDiT,EAAY,GACZC,EAAkB,GAClBC,EAAY,GAUlB,OATAnT,GAAaA,EAAU4I,QAAQ,SAACxG,EAAMgM,GACd,gBAAhBhM,EAAK3C,OACLyT,EAAgBvS,KAAK6F,EAAAC,EAAAC,cAAC0M,GAADpS,OAAA2F,OAAA,CAAa+B,IAAK0F,GAAShM,KACzB,SAAhBA,EAAK3C,OACZ0T,EAAUxS,KAAK6F,EAAAC,EAAAC,cAAC0M,GAADpS,OAAA2F,OAAA,CAAa+B,IAAK0F,GAAShM,KAE1C6Q,EAAUtS,KAAK6F,EAAAC,EAAAC,cAAC0M,GAADpS,OAAA2F,OAAA,CAAa+B,IAAK0F,GAAShM,OAI9CoE,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,YACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,yBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,uCACXQ,EAAAC,EAAAC,cAAA,qBAGPuM,GAELzM,EAAAC,EAAAC,cAAA,OAAKV,UAAU,YACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,yBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,qCACXQ,EAAAC,EAAAC,cAAA,2BAGPwM,GAEL1M,EAAAC,EAAAC,cAAA,OAAKV,UAAU,YACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,yBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,qCACXQ,EAAAC,EAAAC,cAAA,oBAGPyM,aAzCPpM,aCMhBsM,yLACO,IAAA1N,EAC4CJ,KAAKH,MAA/CpF,EADF2F,EACE3F,UAAWvC,EADbkI,EACalI,MAAO6V,EADpB3N,EACoB2N,qBACzB,OACI9M,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACTsN,EAcE9M,EAAAC,EAAAC,cAAA,OAAKV,UAAU,4CAA4CsN,GAb3D9M,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAE,mBAAArH,OAAqBtC,EAAM4C,OAAOR,IAAMmG,UAAU,wBACtDQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,sBAAb,yBAEJQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACC1G,GAAaA,EAAU+C,OACpByD,EAAAC,EAAAC,cAAC6M,GAAD,CAASvT,UAAWA,IAEpBwG,EAAAC,EAAAC,cAAA,OAAKV,UAAU,gCAAf,2CAfDe,aAgCrBuE,GAAkBC,8BAAoB,CACxCvL,UAAWvB,EACX6U,qBAAsB5U,IAGpB8M,GAAqB,CACvBnK,sBAGWwK,MAASJ,aAAQH,GAAiBE,GAAzBC,CAA6C4H,KC/CxDhR,GAAiB9D,YAAeb,EAAO,SAAAC,GAAA,OAAAA,EAAE6E,cAEzCgR,IADoBvV,4BAAkBoE,GAAgB,kBACrCpE,4BAAkBoE,GAAgB,gBCS1DoR,eACF,SAAAA,EAAYrO,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAkO,IACfpO,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAAyS,GAAA/N,KAAAH,KAAMH,KAED2L,SAAW1L,EAAK0L,SAASjE,KAAd9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAHDA,wFAOfE,KAAKH,MAAMpD,eAAe,CAACM,YAAa,wCAGnCiI,GAAY,IAAA5E,EACuCJ,KAAKH,MAAtDhF,EADUuF,EACVvF,QAASsT,EADC/N,EACD+N,eAAgBjW,EADfkI,EACelI,MAAO0T,EADtBxL,EACsBwL,cAEvC,OADA5G,EAAWoJ,SAA6B,OAAlBxC,EACfuC,EAAenJ,EAAY9M,EAAM4C,OAAOR,GAAIO,oCAG9C,IAAA6Q,EACgC1L,KAAKH,MAAnCzF,EADFsR,EACEtR,MAAOuR,EADTD,EACSC,aAAczT,EADvBwT,EACuBxT,MAC5B,OACI+I,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sBACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACXQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAE,iBAAArH,OAAmBtC,EAAM4C,OAAOR,IAAMmG,UAAU,iBAAxD,yBACAQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBAAd,4BACAQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,oBAAb,+BACAQ,EAAAC,EAAAC,cAAA,QAAM7G,GT1CG,wBS0CwBkR,SAAUG,EAAa3L,KAAKwL,UAAWK,YAAY,GAC/EzR,GACG6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sDACVrG,GAGT6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO0I,YAAY,uBAAuBxK,KAAK,aAEnEW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,WAAW0I,YAAY,sBAAsBxK,KAAK,wBAEtEW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO6F,MAAM,WAAW3H,KAAK,aAEjDW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,SAAS9B,KAAK,YAC1BW,EAAAC,EAAAC,cAAA,UAAQV,UAAU,gCACdQ,EAAAC,EAAAC,cAAA,UAAQoB,MAAO,GAAf,mBACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAO,GAAf,QACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAO,GAAf,UACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAO,GAAf,UAKZtB,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,SAAS9B,KAAK,UAC1BW,EAAAC,EAAAC,cAAA,UAAQV,UAAU,gCACdQ,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,IAAd,iBACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,SAAd,SACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,eAAd,eACAtB,EAAAC,EAAAC,cAAA,UAAQoB,MAAM,QAAd,WAKZtB,EAAAC,EAAAC,cAACyE,GAAD,CAAQxD,KAAK,SAAS3B,UAAU,kCAAhC,sBAhEHe,aAkFvB6M,GAAqBrC,aAAU,CACjChO,KTlGiC,yBSiGVgO,CAExBkC,IAEGnI,GAAkBC,8BAAoB,CACxC4F,cAAeqC,KAGbhI,GAAqB,CACvBkI,e5BnE0B,SAACnJ,EAAYiI,EAAWpS,GAAxB,OAAoC,SAACpB,GAC/D,IAAMyL,EAjBsB,SAACF,GAC7B,IAAME,EAAS,GAEf,OAAKzJ,OAAO2H,KAAK4B,GAAYxH,QAMxBwH,EAAWoI,UACZlI,EAAOkI,QAAU,0BAGdlI,GATI,CACHC,OAAQ,oBAYDmJ,CAAwBtJ,GACvC,OAAIE,EAAOC,QAAU1J,OAAO2H,KAAK8B,GAAQ1H,OAC9BvC,QAAQiR,OAAO,IAAIC,IAAgBjH,IAE1CF,EAAWoJ,SACJ1U,IAAM6U,MAAN,gBAAA/T,OAA4ByS,EAA5B,KAAAzS,OAAyCwK,EAAWmI,iBAAmBnI,GACzEpL,KAAK,kBAAMiB,EAAQO,KAAR,iBAAAZ,OAA8ByS,MACzCjT,MAAM,SAACoC,GACJ,OAAOnB,QAAQiR,OAAO,IAAIC,IAAJ1Q,OAAAY,EAAA,EAAAZ,CAAA,GAAwBW,EAAIvC,SAASE,UAGhEL,IAAMuS,KAAN,gBAAAzR,OAA2ByS,GAAajI,GAC1CpL,KAAK,kBAAMiB,EAAQO,KAAR,iBAAAZ,OAA8ByS,MACzCjT,MAAM,SAACoC,GACJ,OAAOnB,QAAQiR,OAAO,IAAIC,IAAJ1Q,OAAAY,EAAA,EAAAZ,CAAA,GAAwBW,EAAIvC,SAASE,Y4BqDnE0C,kBAGW6J,MAASJ,aAAQH,GAAiBE,GAAzBC,CAA6CmI,KC3GhDG,yLAEb,OACIvN,EAAAC,EAAAC,cAAA,OAAKV,UAAU,UACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,yCACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,yBACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,kBAAd,6BACAQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,QAAb,gEACAQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAG,iBAAiBpB,UAAU,+BAApC,WACAQ,EAAAC,EAAAC,cAACoC,GAAA,EAAD,CAAM1B,GAAG,cAAcpB,UAAU,iCAAjC,qBAZEe,aCU5BiN,eACF,SAAAA,EAAY5O,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAAyO,IACf3O,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAAgT,GAAAtO,KAAAH,KAAMH,KAED2L,SAAW1L,EAAK0L,SAASjE,KAAd9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAHDA,0EAMVkF,GAAY,IAAA5E,EACQJ,KAAKH,MAAvBhF,EADUuF,EACVvF,QACP,OAAO6T,EAFUtO,EACDsO,OACH1J,EAAYnK,oCAGpB,IAAA6Q,EACyB1L,KAAKH,MAA5B8L,EADFD,EACEC,aAAcvR,EADhBsR,EACgBtR,MAErB,OACI6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,WACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBAAd,UACAQ,EAAAC,EAAAC,cAAA,QAAM7G,GXjCR,aWiCwBkR,SAAUG,EAAa3L,KAAKwL,UAAWK,YAAY,GACpEzR,GACG6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sDACVrG,GAIT6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,QAAQ0I,YAAY,gBAAgBxK,KAAK,cAE7DW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,WAAW0I,YAAY,WAAWxK,KAAK,cAE3DW,EAAAC,EAAAC,cAACyE,GAAD,CAAQxD,KAAK,SAAS3B,UAAU,+BAAhC,sBAlCZe,aAkDdmN,GAAY3C,aAAU,CACxBhO,KX/DsB,cW8DRgO,CAEfyC,IAEG1I,GAAkBC,8BAAoB,IAItCC,GAAqB,CACvByI,MnBIiB,SAAC1J,EAAYnK,GAAb,OAAyB,SAACpB,GAC3C,IAAMyL,EAASH,GAAaC,GAC5B,OAAIE,EAAOC,QAAU1J,OAAO2H,KAAK8B,GAAQ1H,OAC9BvC,QAAQiR,OAAO,IAAIC,IAAgBjH,IAGvCxL,IAAMuS,KAAK,mBAAoBjH,GACjCpL,KAAK,SAAAwD,GAAY,IAAVrD,EAAUqD,EAAVrD,KACJN,EAASgK,GAAY1J,EAAK2J,QAC1B7I,EAAQO,KAAK,gBAEhBpB,MAAM,SAACoC,GACJ,OAAOnB,QAAQiR,OAAO,IAAIC,IAAJ1Q,OAAAY,EAAA,EAAAZ,CAAA,GAAwBW,EAAIvC,SAASE,amBbxDuM,MAASJ,aAAQH,GAAiBE,GAAzBC,CAA6CyI,KC9D/DC,eACF,SAAAA,EAAY/O,GAAO,IAAAC,EAAA,OAAArE,OAAAsE,GAAA,EAAAtE,CAAAuE,KAAA4O,IACf9O,EAAArE,OAAAwE,GAAA,EAAAxE,CAAAuE,KAAAvE,OAAAyE,GAAA,EAAAzE,CAAAmT,GAAAzO,KAAAH,KAAMH,KAED2L,SAAW1L,EAAK0L,SAASjE,KAAd9L,OAAA+L,GAAA,EAAA/L,QAAA+L,GAAA,EAAA/L,CAAAqE,KAHDA,0EAMVkF,GAAY,IAAA5E,EACeJ,KAAKH,MAA9BhF,EADUuF,EACVvF,QACP,OAAOgU,EAFUzO,EACDyO,cACI7J,EAAYnK,oCAG3B,IAAA6Q,EACyB1L,KAAKH,MAA5B8L,EADFD,EACEC,aAAcvR,EADhBsR,EACgBtR,MAErB,OACI6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,aACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,OACXQ,EAAAC,EAAAC,cAAA,OAAKV,UAAU,mBACXQ,EAAAC,EAAAC,cAAA,MAAIV,UAAU,yBAAd,WACAQ,EAAAC,EAAAC,cAAA,KAAGV,UAAU,oBAAb,uBACAQ,EAAAC,EAAAC,cAAA,QAAM7G,GZjCL,gBYiCwBkR,SAAUG,EAAa3L,KAAKwL,UAAWK,YAAY,GACvEzR,GACG6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,sDACVrG,GAGT6G,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,OAAO0I,YAAY,OAAOxK,KAAK,cAEnDW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,QAAQ0I,YAAY,gBAAgBxK,KAAK,cAG7DW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,WAAW0I,YAAY,WAAWxK,KAAK,cAE3DW,EAAAC,EAAAC,cAAA,OAAKV,UAAU,cACXQ,EAAAC,EAAAC,cAAC2K,GAAD,CAAW1J,KAAK,WAAW0I,YAAY,mBACnCxK,KAAK,qBAEbW,EAAAC,EAAAC,cAACyE,GAAD,CAAQxD,KAAK,SAAS3B,UAAU,+BAAhC,sBA1CTe,aA0DjBsN,GAAe9C,aAAU,CAC3BhO,KZtEyB,iBYqERgO,CAElB4C,IAEG7I,GAAkBC,8BAAoB,IAItCC,GAAqB,CACvB4I,apBjBwB,SAAC7J,EAAYnK,GAAb,OAAyB,SAACpB,GAClD,IAAMyL,EAASH,GAAaC,GAAY,GACxC,OAAIE,EAAOC,QAAU1J,OAAO2H,KAAK8B,GAAQ1H,OAC9BvC,QAAQiR,OAAO,IAAIC,IAAgBjH,IAGvCxL,IAAMuS,KAAK,sBAAuBjH,GACpCpL,KAAK,kBAAMiB,EAAQO,KAAK,YACxBpB,MAAM,SAACoC,GACJ,OAAOnB,QAAQiR,OAAO,IAAIC,IAAJ1Q,OAAAY,EAAA,EAAAZ,CAAA,GAAwBW,EAAIvC,SAASE,aoBWxDuM,MAASJ,aAAQH,GAAiBE,GAAzBC,CAA6C4I,KClFhDC,yLAEb,OACI9N,EAAAC,EAAAC,cAAA,+BAH0BK,aCFzBwN,GAAW,kBAAM,SAACvV,GAC3B,OAAOwB,QAAQC,YCoBE+T,yLACR,IACG9Q,EAAU6B,KAAKH,MAAf1B,MAER,OACI8C,EAAAC,EAAAC,cAAC+N,GAAA,EAAD,CAAU/Q,MAAOA,GACb8C,EAAAC,EAAAC,cAACgO,GAAA,EAAD,KACIlO,EAAAC,EAAAC,cAACiO,GAAD,KACInO,EAAAC,EAAAC,cAACkO,GAAA,EAAD,KACIpO,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAACuO,GAADjU,OAAA2F,OAAA,CAAM3H,SAAU0E,EAAM1E,UAAcmB,EAApC,CAAgDiM,YAAamI,SAC3G/N,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAACwO,GAADlU,OAAA2F,OAAA,CAAO3H,SAAU0E,EAAM1E,UAAcmB,EAArC,CAAiDiM,YAAarB,SACzHvE,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAACyO,GAADnU,OAAA2F,OAAA,CAAU3H,SAAU0E,EAAM1E,UAAcmB,EAAxC,CAAoDiM,YAAapB,SAC/HxE,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,qBAAqBC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAAC0O,GAADpU,OAAA2F,OAAA,CAAW3H,SAAU0E,EAAM1E,UAAcmB,EAAzC,CAAqDiM,YAAauF,SACjInL,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,mBAAmBC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAAC2O,GAADrU,OAAA2F,OAAA,CAAY3H,SAAU0E,EAAM1E,UAAcmB,EAA1C,CAAsDiM,YAAalM,QAChIsG,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,qBAAqBC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAAC4O,GAADtU,OAAA2F,OAAA,CAAc3H,SAAU0E,EAAM1E,UAAcmB,EAA5C,CAAwDiM,YAAa1K,QACpI8E,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kCAAkCC,OAAQ,SAAC7U,GAAD,OAAgBqG,EAAAC,EAAAC,cAAC6O,GAADvU,OAAA2F,OAAA,CAAgB3H,SAAU0E,EAAM1E,UAAcmB,EAA9C,CAA0DiM,YAAanK,QACnJuE,EAAAC,EAAAC,cAACmO,GAAA,EAAD,CAAOlE,UAAW2D,gBAhBVvN,aCdpCyO,IAASR,OAAOxO,EAAAC,EAAAC,cAAC+O,GAAD,CAAQ/R,MAAOA,KAAWgS,SAASC,eAAe,S7C0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3W,KAAK,SAAA4W,GACjCA,EAAaC","file":"static/js/main.15b45b11.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const getUi = ({ui}) => ui\nexport const getProjects = ({project}) => project\nexport const getForm = ({form}) => form\nexport const getUser = ({user}) => user\n","import {createGetSelector} from 'reselect-immutable-helpers'\n\nimport {getUser} from '../../store/selectors'\n\nexport const isUserLoggedIn = createGetSelector(getUser, 'authenticated')\nexport const getUsername = createGetSelector(getUser, 'username')\n","import {createGetSelector} from 'reselect-immutable-helpers'\n\nimport {getProjects} from '../../store/selectors'\n\nexport const getProjectsList = createGetSelector(getProjects, 'projectsList')\n","import {createSelector} from 'reselect'\nimport {createGetSelector} from 'reselect-immutable-helpers'\n\nimport {getUi} from '../../store/selectors'\n\nexport const getProjectBoard = createSelector(getUi, ({projectBoard}) => projectBoard)\nexport const getCurrentTaskList = createGetSelector(getProjectBoard, 'tasksList')\nexport const getProjectNotFoundError = createGetSelector(getProjectBoard, 'projectNotFound')\n","import axios from 'axios'\nimport {createAction} from 'redux-actions'\n\nimport {getProjectsList} from './selectors'\nimport {getCurrentTaskList} from '../../containers/project-board/selectors'\n\nexport const receiveProjects = createAction('Receive Projects List')\nexport const receiveProject = createAction('Receive Project Data')\nexport const receiveProjectsTasks = createAction('Receive Projects Tasks List')\nexport const receiveProjectTask = createAction('Receive Project Task')\n\nexport const getProjects = () => (dispatch) => {\n    axios.get('/api/project/all')\n        .then((response) => dispatch(receiveProjects({projectsList: response.data})))\n        .catch((e) => e.response.status === 401 && console.error('Please log in'))\n}\n\nexport const getProject = (id) => (dispatch, getStore) => {\n    const projects = getProjectsList(getStore())\n    const project = projects.find((project) => project.projectIdentifier === id)\n    if (project) {\n        return new Promise((resolve) => resolve(project))\n    } else {\n        return axios.get(`/api/project/${id}`)\n            .then((response) => {\n                dispatch(receiveProject(response.data))\n                return response.data\n            })\n    }\n}\n\nexport const getProjectTasksById = (id) => (dispatch, getStore) => {\n    return axios.get(`/api/backlog/${id}`)\n        .then((response) => dispatch(receiveProjectsTasks({tasksList: response.data, id})))\n}\n\nexport const getProjectTask = (id, sequence) => (dispatch, getStore) => {\n    const tasksList = getCurrentTaskList(getStore())\n    const task = tasksList.find((task) => task.projectIdentifier === id)\n    if (task) {\n        return new Promise((resolve) => resolve(task))\n    } else {\n        return dispatch(getProjectTasksById(id))\n            .then((response) => {\n                const updatedTasksList = response.payload.tasksList\n                const updatedTask = updatedTasksList.find((task) => task.projectIdentifier === id)\n                return updatedTask\n            })\n    }\n}\n","import axios from 'axios'\nimport {createAction} from 'redux-actions'\nimport {SubmissionError} from 'redux-form'\n\nimport {isUserLoggedIn} from '../../store/user/selectors'\n\nimport {getProject} from '../../store/project/actions'\n\nexport const setCurrentProject = createAction('Receive Current Project')\n\nexport const initAddProject = (routeProps) => (dispatch, getStore) => {\n    const {match, history} = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        match.params.id &&\n            dispatch(getProject(match.params.id))\n                .then((project) => dispatch(setCurrentProject({currentProject: project})))\n                .catch((e) => history.push('/dashboard'))\n    }\n    return Promise.resolve()\n}\n\nexport const createProject = (formValues, history) => (dispatch) => {\n    if (!Object.keys(formValues).length) {\n        return Promise.reject(new SubmissionError({_error: 'Please fill form'}))\n    }\n    return axios.post('/api/project', formValues)\n        .then(() => history.push('/dashboard'))\n        .catch((err) => {\n            return Promise.reject(new SubmissionError({...err.response.data}))\n        })\n}\n","import {handleActions} from 'redux-actions'\nimport Immutable from 'immutable'\n\nimport {setCurrentProject} from './actions'\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [setCurrentProject]: (state, {payload}) => {\n        return state.mergeDeep(payload)\n    }\n}, initialState)\n","import axios from 'axios'\nimport {createAction} from 'redux-actions'\n\nimport {isUserLoggedIn} from '../../store/user/selectors'\n\nimport {getProjectTasksById} from '../../store/project/actions'\n\nexport const setCurrentTaskList = createAction('Receive Current Task List')\nexport const receiveErrorMessage = createAction('Receive Error Message')\n\nexport const updateProductTasks = (id) => (dispatch) => {\n    dispatch(receiveErrorMessage({projectNotFound: undefined}))\n    return dispatch(getProjectTasksById(id))\n        .then(({payload}) => dispatch(setCurrentTaskList(payload)))\n}\n\nexport const initProjectBoard = (routeProps) => (dispatch, getStore) => {\n    const {match, history} = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        match.params.id && dispatch(updateProductTasks(match.params.id))\n        .catch((err) => {\n            dispatch(receiveErrorMessage({...err.response.data}))\n        })\n    }\n    return Promise.resolve()\n}\n\nexport const deleteProject = (backlogId, projectTaskId) => (dispatch) => {\n    if (window.confirm('Are you sure?')) { // TODO: Add modals\n        return axios.delete(`/api/backlog/${backlogId}/${projectTaskId}`)\n            .then(() => dispatch(updateProductTasks(backlogId)))\n    }\n}\n","import {handleActions} from 'redux-actions'\nimport {fromJS} from 'immutable'\n\nimport {setCurrentTaskList, receiveErrorMessage} from './actions'\n\nconst initialState = fromJS({\n    tasksList: []\n})\n\nexport default handleActions({\n    [setCurrentTaskList]: (state, {payload}) => state.merge({tasksList: payload.tasksList}),\n    [receiveErrorMessage]: (state, {payload}) => state.merge(payload),\n}, initialState)\n","import axios from 'axios'\nimport {createAction} from 'redux-actions'\nimport {SubmissionError} from 'redux-form'\n\nimport {isUserLoggedIn} from '../../store/user/selectors'\n\nimport {getProjectTask} from '../../store/project/actions'\n\nexport const setCurrentTask = createAction('Receive Current Task')\n\nexport const initAddProjectTask = (routeProps) => (dispatch, getStore) => {\n    const {match, history} = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        const {id, sequence} = match.params\n        id && sequence &&\n            dispatch(getProjectTask(id, sequence))\n                .then((task) => dispatch(setCurrentTask({currentTask: task})))\n                .catch((e) => history.push('/dashboard'))\n    }\n    return Promise.resolve()\n}\n\nconst validateProjectTaskForm = (formValues) => {\n    const errors = {}\n\n    if (!Object.keys(formValues).length) {\n        return {\n            _error: 'Please fill form'\n        }\n    }\n\n    if (!formValues.summary) {\n        errors.summary = 'Summary can\\'t be empty'\n    }\n\n    return errors\n}\n\nexport const addProjectTask = (formValues, backlogId, history) => (dispatch) => {\n    const errors = validateProjectTaskForm(formValues)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n    if (formValues.isUpdate) {\n        return axios.patch(`/api/backlog/${backlogId}/${formValues.projectSequence}`, formValues)\n            .then(() => history.push(`/projectBoard/${backlogId}`))\n            .catch((err) => {\n                return Promise.reject(new SubmissionError({...err.response.data}))\n            })\n    }\n    return axios.post(`/api/backlog/${backlogId}`, formValues)\n        .then(() => history.push(`/projectBoard/${backlogId}`))\n        .catch((err) => {\n            return Promise.reject(new SubmissionError({...err.response.data}))\n        })\n}\n","import {handleActions} from 'redux-actions'\nimport Immutable from 'immutable'\nimport { setCurrentTask } from './actions';\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [setCurrentTask]: (state, {payload}) => {\n        return state.mergeDeep(payload)\n    }\n}, initialState)\n","import {combineReducers} from 'redux'\n\nimport project from './add-project/reducer'\nimport projectBoard from './project-board/reducer'\nimport projectTask from './add-project-task/reducer'\n\nexport default combineReducers({\n    project,\n    projectBoard,\n    projectTask\n})\n","import {handleActions} from 'redux-actions'\nimport {fromJS} from 'immutable'\n\nimport {receiveProjects, receiveProject, receiveProjectsTasks} from './actions'\n\nconst initialState = fromJS({\n    projectsList: []\n})\n\nexport default handleActions({\n    [receiveProjects]: (state, {payload}) => {\n        return state.merge(payload)\n    },\n    [receiveProject]: (state, {payload}) => {\n        return state.update('projectsList', projectsList => projectsList.push({...payload}))\n    },\n    [receiveProjectsTasks]: (state, {payload}) => {\n        const projectList = state.get('projectsList')\n        let addProject = true\n        for (let i = 0; i < projectList.length; i++) {\n            const project = projectList[i]\n            if (project.projectIdentifier === payload.id) {\n                project.tasksList = payload.tasksList\n                addProject = false\n                break\n            }\n        }\n\n        if (addProject) {\n            return state.update('projectsList', projectsList => projectsList.push({projectIdentifier: payload.id, tasksList: payload.tasksList}))\n        }\n        return state.set('projectsList', projectList)\n    },\n}, initialState)\n","import {createAction} from 'redux-actions'\n\nexport const receiveUserData = createAction('Receive User Data')\nexport const setLoggedIn = createAction('Set user log in status')\n","import {handleActions} from 'redux-actions'\nimport Immutable from 'immutable'\n\nimport {receiveUserData, setLoggedIn} from './actions'\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [receiveUserData]: (state, {payload}) => {\n        return state.merge(payload)\n    },\n    [setLoggedIn]: (state, {payload}) => {\n        return state.merge(payload)\n    }\n}, initialState)\n","import {createStore, applyMiddleware, compose, combineReducers} from 'redux'\nimport Immutable from 'immutable'\nimport thunk from 'redux-thunk'\nimport {reducer as formReducer} from 'redux-form'\n\nimport rootReducer from '../containers/reducers'\nimport projectReducer from './project/reducer'\nimport userReducer from './user/reducer'\n\nconst reducers = combineReducers({\n    ui: rootReducer,\n    project: projectReducer,\n    form: formReducer,\n    user: userReducer\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n          ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n              serialize: {\n                  immutable: Immutable\n              }\n          })\n          : compose\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunk))(createStore)\nconst store = createStoreWithMiddleware(reducers)\n\nexport default store\n","/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\n// Helper object to quickly and clearly indicate keyCodes\nexport const keyMap = {\n    // Focus\n    tab: 9,\n    // Navigation\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    // Action\n    enter: 13,\n    escape: 27,\n    space: 32\n}\n\n// Helper method to ensure keyboard can trigger onClick event\nexport const onKeyUpHelper = (event, onClick, keycode, otherArgs = {}) => {\n    // Default key is (space)\n    if (event.keyCode === keycode || event.keyCode === keyMap.space) {\n        if (typeof onClick === 'function') {\n            onClick(event, ...otherArgs)\n        }\n    }\n}\n\n// HOF to make using onKeyUpHelper easier\nexport const onKeyUpWrapper = (onClick, keycode) => (event, ...otherArgs) => onKeyUpHelper(event, onClick, keycode, otherArgs)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst uuid = (() => {\n    let i = 0\n    return () => {\n        return i++\n    }\n})()\n\n/**\n * `Icon` component renders an SVG that uses the chosen symbol from the SVG sprite present on the page.\n */\n\nclass Icon extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.id = `icon-${uuid()}`\n    }\n\n    render() {\n        const {\n            prefix,\n            name,\n            title,\n            size,\n            className,\n            style\n        } = this.props\n\n        const a11y = (title.length) ? {role: 'img'} : {'aria-hidden': 'true'}\n        const sizeClass = `c--${size}`\n\n        const classes = classNames('c-icon', {\n            [sizeClass]: !!size\n        }, className)\n\n        return (\n            <svg {...a11y}\n                className={classes}\n                title={title}\n                aria-labelledby={this.id}\n                style={style}\n            >\n                <title id={this.id}>{title}</title>\n                <use role=\"presentation\" xlinkHref={`#${prefix}-${name}`} />\n            </svg>\n        )\n    }\n}\n\nIcon.defaultProps = {\n    name: '',\n    title: '',\n    prefix: 'pw',\n    style: {}\n}\n\nIcon.propTypes = {\n    /**\n     * Identifier for the desired icon. Usually the filename, sans its prefix.\n     * For example, if the target icon is `c-chevron-up.svg`, the name\n     * is `chevron-up`.\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The prefix is the first part of the icon name/id. If you're using a\n     * different icon set, the prefix may need to be modified.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The size of the icon, controlled by CSS.\n     */\n    size: PropTypes.string,\n\n    /**\n     * Custom `style` attribute.\n     */\n    style: PropTypes.object,\n\n    /**\n     * **Beware** that ommitting a `title` will leave the icon **invisible** to\n     * screen readers. If included, screen readers will read and treat the\n     * icon like an image with alt text.\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n}\n\nexport default Icon\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport {onKeyUpWrapper} from '../../utils/a11y-utils'\n\nimport {Link} from 'react-router-dom'\nimport Icon from '../icon'\n\n/**\n * A styleable, accessible `<button>` component.\n */\n\nconst Button = (props) => {\n\n    const {\n        // Values\n        to,\n        icon,\n        iconSize,\n        iconClassName,\n        innerClassName,\n        showIconText,\n        text,\n        title,\n        type,\n\n        // Attributes\n        id,\n        children,\n        className,\n        disabled,\n        name,\n        value,\n        role,\n        openInNewTab,\n\n        // Handlers\n        onClick,\n    } = props\n\n    const classes = classNames('c-button', {\n        'c--anchor': !!to,\n        'c--icon-only': !!icon && !children\n    }, className)\n    const innerClass = classNames('c-button__inner', innerClassName)\n    const iconClass = classNames('c-button__icon', iconClassName, {\n        'c--has-siblings': children || (title && showIconText)\n    })\n    const textClass = classNames('c-button__text', {\n        'u-visually-hidden': !showIconText\n    })\n    const attrs = {\n        to, id, disabled, name, value, role, onClick,\n        onKeyUp: onKeyUpWrapper(onClick),\n        className: classes\n    }\n\n    let childrenNodes\n\n    if (icon) {\n        childrenNodes = [\n            <Icon className={iconClass} size={iconSize} name={icon} key=\"autoicon\" />,\n            title && <span className={textClass} key=\"autotitle\">{title}</span>\n        ]\n\n        if (typeof children === 'string') {\n            childrenNodes.push(children)\n        } else {\n            childrenNodes.push(\n                ...(children || [])\n            )\n        }\n    } else {\n        childrenNodes = text || children\n    }\n\n    // Add all aria and data attributes\n    Object.keys(props).forEach((key) => {\n        if (/^(aria|data)-/.test(key)) {\n            attrs[key] = props[key]\n        }\n    })\n\n    if (to) {\n        return (\n            <Link {...attrs} target={openInNewTab ? '_blank' : ''}>\n                <div className={innerClass}>{childrenNodes}</div>\n            </Link>\n        )\n    } else {\n        return (\n            <button {...attrs} type={type}>\n                <div className={innerClass}>{childrenNodes}</div>\n            </button>\n        )\n    }\n}\n\nButton.defaultProps = {\n    type: 'button'\n}\n\nButton.propTypes = {\n    /**\n     * Any children to be nested within this button.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Defines if button is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * If specified, the component is rendered as a link, with this value set as the href.\n     */\n    to: PropTypes.string,\n\n    /**\n     * If specified, includes an icon of the given name in the button.\n     * For more information about available icons, see the [Icon component](#!/Icon).\n     */\n    icon: PropTypes.string,\n\n    /**\n     * Adds values to the class attribute in <Icon> component.\n     */\n    iconClassName: PropTypes.string,\n\n    /**\n     * If specified, will set the icon to the size of your choice.\n     */\n    iconSize: PropTypes.string,\n\n\n    /**\n     * Sets the `id` attribute of the root element.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Adds values to the class attribute of the inner container.\n     */\n    innerClassName: PropTypes.string,\n\n    /**\n     * The button's `name` attribute.\n     */\n    name: PropTypes.string,\n\n    /**\n     * For use with Buttons with an href set.\n     *\n     * If true, target=\"_blank\" will be added to the button.\n     * Only use this property if you trust the link! https://mathiasbynens.github.io/rel-noopener\n     */\n    openInNewTab: PropTypes.bool,\n\n    /**\n     * The button's `role` attribute.\n     */\n    role: PropTypes.string,\n\n    /**\n    * For use when the icon and title attributes have been defined.\n    * If false, `u-visually-hidden` class will be added to the container that wraps\n    * the title attribute. If true, `u-visually-hidden` will be removed.\n    *\n    */\n    showIconText: PropTypes.bool,\n\n    /**\n     * Text contents of the button.\n     */\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * The title to be used for accessibility (generally if `icon` is used).\n     * If showIconText is set to true, this text will be shown with the icon\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * Specifies button type, defaults to `button`.\n     */\n    type: PropTypes.oneOf(['button', 'submit']),\n\n    /**\n     * The button's `value` attribute.\n     */\n    value: PropTypes.string,\n\n    /**\n     * User-defined method for hooking into click events.\n     */\n    onClick: PropTypes.func\n}\n\nexport default Button\n","import axios from \"axios\"\nimport jwt_decode from 'jwt-decode'\n\nimport { setLoggedIn, receiveUserData } from \"../store/user/actions\"\n\nconst AUTH_KEY_NAME = 'sec-auth'\n\nconst getItemFromBrowserStorage = (keyName) => {\n    return window.sessionStorage.getItem(keyName)\n}\n\nconst setItemInBrowserStorage = (keyName, value) => {\n    window.sessionStorage.setItem(keyName, value)\n}\n\nconst removeItemFromBrowserStorage = (keyName) => {\n    window.sessionStorage.removeItem(keyName)\n}\n\nexport const setJWTToken = (token) => (dispatch) => {\n    if (token) {\n        setItemInBrowserStorage(AUTH_KEY_NAME, token)\n        axios.defaults.headers.common['Authorization'] = token\n\n        const decodedToken = jwt_decode(token)\n        dispatch(receiveUserData({fullName: decodedToken.fullName, username: decodedToken.username}))\n        dispatch(setLoggedIn({authenticated: true}))\n    } else {\n        removeItemFromBrowserStorage(AUTH_KEY_NAME)\n        dispatch(setLoggedIn({authenticated: false}))\n        delete axios.defaults.headers.common['Authorization']\n    }\n}\n\nconst isTokenExpired = (authorizationToken) => {\n    const {exp} = jwt_decode(authorizationToken)\n\n    const now = Date.now() / 1000\n    return exp < now\n}\n\nexport const initSession = () => (dispatch) => {\n    const auth = getItemFromBrowserStorage(AUTH_KEY_NAME)\n    if ((!auth || isTokenExpired(auth)) && axios.defaults.headers.common['Authorization']) {\n        dispatch(setJWTToken())\n    } else if (auth && axios.defaults.headers.common['Authorization'] !== auth) {\n        dispatch(setJWTToken(auth))\n    }\n    return Promise.resolve()\n}\n","import isEmail from 'validator/lib/isEmail'\nimport axios from 'axios'\nimport {SubmissionError} from 'redux-form'\n\nimport { setJWTToken } from '../../utils/request-utils'\nimport {isUserLoggedIn} from '../../store/user/selectors'\n\nconst validateForm = (formValues, isRegister) => {\n    const errors = {}\n    if (!formValues) {\n        return {\n            _error: 'Please fill form'\n        }\n    }\n\n    const {\n        username,\n        password,\n        confirmPassword,\n        fullName\n    } = formValues\n\n    if (!username) {\n        errors.username = 'Email address is required'\n    } else if (!isEmail(username)) {\n        errors.username = 'Email address is invalid'\n    }\n\n    if (!password) {\n        errors.password = 'Password is required'\n    } else if (password.length < 6) {\n        errors.password = \"Password needs to be at least 6 characters\"\n    }\n\n    if (isRegister && !confirmPassword) {\n        errors.confirmPassword = 'Confirm password is required'\n    } else if (isRegister && confirmPassword !== password) {\n        errors.confirmPassword = 'Passwords must match'\n    }\n\n    if (isRegister && !fullName) {\n        errors.fullName = 'Name is required'\n    }\n\n    return errors\n}\n\nconst checkLoginStatus = (history) => (dispatch, getStore) => {\n    if (isUserLoggedIn(getStore())) {\n        history.push('/dashboard')\n        return Promise.resolve()\n    }\n}\n\nexport const initLogin = ({history}) => (dispatch) => {\n    dispatch(checkLoginStatus(history))\n    return Promise.resolve()\n}\n\nexport const initRegister = ({history}) => (dispatch) => {\n    dispatch(checkLoginStatus(history))\n    return Promise.resolve()\n}\n\nexport const registerUser = (formValues, history) => (dispatch) => {\n    const errors = validateForm(formValues, true)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n\n    return axios.post('/api/users/register', formValues)\n        .then(() => history.push('/login'))\n        .catch((err) => {\n            return Promise.reject(new SubmissionError({...err.response.data}))\n        })\n}\n\nexport const login = (formValues, history) => (dispatch) => {\n    const errors = validateForm(formValues)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n\n    return axios.post('/api/users/login', formValues)\n        .then(({data}) => {\n            dispatch(setJWTToken(data.token))\n            history.push('/dashboard')\n        })\n        .catch((err) => {\n            return Promise.reject(new SubmissionError({...err.response.data}))\n        })\n}\n\nexport const logout = () => (dispatch) => {\n    dispatch(setJWTToken())\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\n\nimport Button from '../../components/button'\nimport {Link} from 'react-router-dom'\n\nimport { getUsername, isUserLoggedIn } from '../../store/user/selectors'\nimport { logout } from '../user-management/actions'\n\nclass Header extends Component {\n    render() {\n        const {username, isUserLoggedIn, logout} = this.props\n        return (\n            <nav className=\"t-header navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">Personal Project Management Tool</Link>\n                    <Button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </Button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/dashboard\">Dashboard</Link>\n                            </li>\n                        </ul>\n\n                        <ul className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                {isUserLoggedIn ?\n                                    <div className=\"nav-link fas fa-user-circle mr-1\">Welcome {username}</div>\n                                :\n                                    <Link className=\"nav-link \" to=\"register.html\">Sign Up</Link>\n                                }\n                            </li>\n                            <li className=\"nav-item\">\n                                {isUserLoggedIn ?\n                                    <Button className=\"nav-link\" to=\"/\" onClick={() => { logout() }}>Logout</Button>\n                                :\n                                    <Link className=\"nav-link\" to=\"login.html\">Login</Link>\n                                }\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nHeader.propTypes = {\n    isUserLoggedIn: PropTypes.bool,\n    logout: PropTypes.func,\n    username: PropTypes.string\n}\n\nconst mapStateToProps = createPropsSelector({\n    username: getUsername,\n    isUserLoggedIn\n})\n\nconst mapDispatchToProps = {\n    logout\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\n","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Header from '../header/Header'\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"t-app\">\n                <Header />\n                <main id=\"app-main\" className=\"c-app__main u-flex\" role=\"main\">\n                    {this.props.children}\n                </main>\n            </div>\n        );\n    }\n}\n\nApp.propTypes = {\n    children: PropTypes.object.isRequired,\n}\n\nexport default withRouter(App)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { initSession } from './utils/request-utils'\n\nconst getDisplayName = (WrappedComponent) => {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component'\n}\n\nconst template = (WrappedComponent) => {\n    class Template extends React.Component {\n        constructor(props) {\n            super(props)\n\n            this.WrappedComponent = WrappedComponent\n        }\n\n        dispatchRouteChange({fetchAction, dispatch, history}) {\n            this.props.initSession(history)\n                .then(() => {\n                    if (fetchAction) {\n                        dispatch(fetchAction(this.props))\n                    }\n                })\n        }\n\n        componentWillMount() {\n            this.dispatchRouteChange(this.props)\n        }\n\n        render() {\n            return (<WrappedComponent {...this.props} />)\n        }\n    }\n    Template.WrappedComponent = WrappedComponent\n    Template.displayName = `Template(${getDisplayName(WrappedComponent)})`\n    Template.propTypes = {\n        dispatch: PropTypes.func,\n        location: PropTypes.object,\n        initSession: PropTypes.func,\n        retryingConnection: PropTypes.bool\n    }\n\n    const mapDispatchToProps = {\n        initSession\n    }\n\n    return connect(null, mapDispatchToProps)(Template)\n}\n\nexport default template\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst getUniqueId = (() => {\n    let i = 0\n\n    return () => {\n        return `field-${i++}`\n    }\n})()\n\n/**\n * Related components:\n *\n * * [FieldRow](#!/FieldRow)\n * * [FieldSet](#!/FieldSet)\n *\n * `Field` is a wrapper around a single form input that standardizes layout\n * of labels, hints and errors when using `redux-form`.\n *\n * It expects to receive an `<input>`, `<select>`, `<textarea>` or a custom\n * form-input component. Custom inputs should be compatible with redux-form\n * which typically means accepting `onChange`, `onBlur` and `value` props.\n */\nclass Field extends React.Component {\n    constructor(props) {\n        super(props)\n\n        if (props.idForLabel) {\n            this.inputId = props.idForLabel\n        } else {\n            this.inputId = getUniqueId()\n        }\n\n        this.isCheckRadio = false\n        this.shouldStackLabelInput = this.shouldStackLabelInput.bind(this)\n        this.shouldPlaceLabelAtEnd = this.shouldPlaceLabelAtEnd.bind(this)\n        this.buildEventHandler = this.buildEventHandler.bind(this)\n    }\n\n    shouldStackLabelInput() {\n        if (!this.props.labelPosition) {\n            return !this.isCheckRadio\n        } else {\n            return this.props.labelPosition === 'top'\n        }\n    }\n\n    shouldPlaceLabelAtEnd() {\n        if (!this.props.labelPosition) {\n            return this.isCheckRadio\n        } else {\n            return this.props.labelPosition === 'end'\n        }\n    }\n\n    buildEventHandler(eventHandlerName) {\n        const customHandler = this.props.customEventHandlers[eventHandlerName]\n        const input = this.props.input\n\n        if (input) {\n            return typeof customHandler === 'function' ? (e) => {\n                this.props.input[eventHandlerName](e)\n                customHandler(e)\n            } : this.props.input[eventHandlerName]\n        }\n        return customHandler\n    }\n\n    render() {\n        const {\n            label,\n            hint,\n            error,\n            caption,\n            className,\n            children,\n            shouldShowErrorsInstantly,\n            customEventHandlers\n        } = this.props\n\n        let childDisabled = false\n        let childChecked = false\n        const onlyChild = React.Children.count(children) === 1\n\n        const newChildren = React.Children.map(children, (child, idx) => {\n            let childProps = {}\n\n            const isFormControl = (\n                child.type === 'input' ||\n                child.type === 'select' ||\n                child.type === 'textarea' ||\n                typeof child.type == 'function'  // Custom component, can handle props\n            )\n\n            if (isFormControl) {\n                childProps = {...this.props.input}\n            }\n\n            if (customEventHandlers) {\n                // Redux form adds it's own handlers for these events\n                // In order to add our own and prevent redux-forms being overwritten\n                // we need to build a new function that calls both\n                // Overwritting redux form's handlers will cause validation to break\n                childProps.onBlur = this.buildEventHandler('onBlur', childProps)\n                childProps.onFocus = this.buildEventHandler('onFocus', childProps)\n                childProps.onChange = this.buildEventHandler('onChange', childProps)\n                childProps.onDrop = this.buildEventHandler('onDrop', childProps)\n                childProps.onDragStart = this.buildEventHandler('onDragStart', childProps)\n            }\n\n            childProps = {\n                ...childProps,\n                'aria-invalid': !!error,\n                'aria-required': child.props.required,\n                ...child.props\n            }\n\n            if (child.props.disabled) {\n                childDisabled = true\n            }\n\n            if (childProps.checked) {\n                childChecked = true\n            }\n\n            if (error) {\n                childProps.className = classNames(child.props.className, 'c--has-error')\n            }\n\n            // Give the first child the id for the field\n            if (idx === 0) {\n                childProps.id = this.inputId\n            }\n\n            if (onlyChild && (child.props.type === 'radio' || child.props.type === 'checkbox')) {\n                this.isCheckRadio = true\n            }\n\n            if (child.props.required) {\n                this.isRequired = true\n            }\n\n            return React.cloneElement(child, childProps)\n        })\n\n        const metaProps = this.props.meta\n        // eslint-disable-next-line no-mixed-operators\n        const shouldShowReduxError = metaProps && (metaProps.touched && !metaProps.active || (metaProps.dirty && shouldShowErrorsInstantly))\n        const reduxFormError = metaProps && shouldShowReduxError && metaProps.error\n        const fieldError = error || reduxFormError\n\n        const classes = classNames('c-field', {\n            'c--is-check-radio': this.isCheckRadio,\n            'c--error': fieldError,\n            'c--required': this.isRequired,\n            'c--disabled': childDisabled,\n            'c--checked': childChecked\n        }, className)\n\n        const innerClasses = classNames('c-field__inner', {\n            'c--stack': this.shouldStackLabelInput()\n        })\n\n        const labelClasses = classNames('c-field__label-wrap', {\n            'c--end': this.shouldPlaceLabelAtEnd()\n        })\n\n        const inputClasses = classNames('c-field__input')\n\n        return (\n            <div className={classes}>\n                <div className={innerClasses}>\n                    {label &&\n                        <div className={labelClasses}>\n                            <label\n                                className=\"c-field__label\"\n                                htmlFor={this.inputId}\n                            >\n                                {label}\n                            </label>\n\n                            {hint &&\n                                <div className=\"c-field__hint\">\n                                    {hint}\n                                </div>\n                            }\n                        </div>\n                    }\n\n                    <div className={inputClasses}>\n                        {newChildren}\n                    </div>\n                </div>\n\n                {fieldError &&\n                    <div className=\"c-field__error\">\n                        {fieldError}\n                    </div>\n                }\n\n                {caption &&\n                    <div className=\"c-field__caption\">\n                        {caption}\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\n\n\nField.propTypes = {\n    /**\n     * The input(s) to include in the field.\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * Extra information that may help the user complete this field.\n     */\n    caption: PropTypes.node,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n    * Custom event handlers to be added to the input.\n    * If used with redux form these handlers will be called after\n    * the handlers added by redux form.\n    */\n    customEventHandlers: PropTypes.shape({\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n        onDrop: PropTypes.func,\n        onDragStart: PropTypes.func,\n        onFocus: PropTypes.func\n    }),\n    /**\n     * If this prop is passed in, the c--error class will be added to the field\n     * and the error will be shown.\n     * Also adds the aria-invalid attribute.\n     */\n    error: PropTypes.node,\n\n    /**\n     * Extra information that displays beside the label.\n     */\n    hint: PropTypes.node,\n\n    /**\n     * If provided, this will be used as the 'id' attr for the input and the 'for' attr for the label.\n     * If not provided, an id will be generated and used.\n     */\n    idForLabel: PropTypes.string,\n\n    /**\n     * Developers can ignore this prop.\n     * If our field is used with redux-form this prop gets passed by redux-form.\n     */\n    input: PropTypes.object,\n\n    /**\n     * The label for the input.\n     * The id of the input will be used as the 'for' attribute for this label,\n     * unless one is already provided.\n     */\n    label: PropTypes.node,\n\n    /**\n     * Specify the position of the label. Default behaviour:\n     * If the input is a checkbox or radio, the label will display after the input\n     * Else, the label will display on top of the input.\n     */\n    labelPosition: PropTypes.oneOf(['top', 'start', 'end']),\n\n    /**\n     * Developers can ignore this prop.\n     * If our field is used with redux-form this prop gets passed by redux-form.\n     */\n    meta: PropTypes.object,\n\n    /**\n     * Indicates whether to show field errors instantly, i.e. as the user types\n     * in a field.\n     * Set this to `false` to show errors on blur.\n     */\n    shouldShowErrorsInstantly: PropTypes.bool\n}\n\nexport default Field\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Field as ReduxFormField} from 'redux-form'\n\nimport Field from '../field'\n\nconst FormField = ({label, type, name, placeholder, classes, rowClasses, defaultChecked, disabled, children}) => {\n    const inputOptions = {\n        type,\n        placeholder,\n        defaultChecked,\n        disabled\n    }\n\n    let inputField = <input {...inputOptions} className=\"form-control form-control-lg\" />\n    if (type === 'textarea') {\n        inputField = <textarea {...inputOptions} className=\"form-control form-control-lg\" />\n    } else if (type === 'select') {\n        inputField = children\n    }\n\n    return (\n        <div className={`c-form-field ${rowClasses}`}>\n            <ReduxFormField\n                className={classes}\n                name={name}\n                label={label}\n                type={type}\n                component={Field} >\n\n                {inputField}\n            </ReduxFormField>\n        </div>\n    )\n}\n\nFormField.propTypes = {\n    children: PropTypes.node,\n    label: PropTypes.node,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    classes: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    placeholder: PropTypes.string,\n    rowClasses: PropTypes.string\n}\n\nexport default FormField\n","import {createSelector} from 'reselect'\nimport {createGetSelector} from 'reselect-immutable-helpers'\n\nimport {getUi} from '../../store/selectors'\n\nexport const getProject = createSelector(getUi, ({project}) => project)\nexport const getCurrentProject = createGetSelector(getProject, 'currentProject')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {reduxForm} from 'redux-form'\nimport {connect} from 'react-redux'\nimport {createPropsSelector} from 'reselect-immutable-helpers'\nimport template from '../../template'\n\nimport {ADD_PROJECT_FORM} from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport {createProject, setCurrentProject} from './actions'\nimport {getCurrentProject} from './selectors'\n\nclass AddProject extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentWillUnmount() {\n        this.props.setCurrentProject({currentProject: undefined})\n    }\n\n    onSubmit(formValues) {\n        const {history, createProject} = this.props\n        return createProject(formValues, history)\n    }\n\n    render() {\n        const {error, handleSubmit, initialValues} = this.props\n        return (\n            <div className=\"t-add-project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Create Project form</h5>\n                            <hr />\n                            <form id={ADD_PROJECT_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Project Name Placeholder\" label=\"Project Name Label\" name=\"projectName\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField disabled={initialValues !== null} type=\"text\" placeholder=\"Project Identifier Placeholder\" label=\"Project Identifier Label\" name=\"projectIdentifier\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"textarea\" placeholder=\"Project Description Placeholder\" label=\"Project Description Label\" name=\"description\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" placeholder=\"Start Date Placeholder\" label=\"Start Date Label\" name=\"start_date\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" placeholder=\"End Date Placeholder\" label=\"End Date Label\" name=\"end_date\" />\n                                </div>\n\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    error: PropTypes.string,\n    initialValues: PropTypes.object,\n    handleSubmit: PropTypes.func,\n    setCurrentProject: PropTypes.func\n}\n\nconst AddProjectForm = reduxForm({\n    form: ADD_PROJECT_FORM\n})(AddProject)\n\nconst mapStateToProps = createPropsSelector({\n    initialValues: getCurrentProject\n})\n\nconst mapDispatchToProps = {\n    createProject,\n    setCurrentProject\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(AddProjectForm))\n","export const ADD_PROJECT_FORM = 'add-product-form'\nexport const ADD_PROJECT_FORM_TASK = 'add-product-form-task'\nexport const LOGIN_FORM = 'login-form'\nexport const REGISTER_FORM = 'register-form'\n","import axios from 'axios'\nimport { getProjects } from \"../../store/project/actions\"\n\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nexport const initDashboard = ({ history }) => (dispatch, getStore) => {\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n        return Promise.resolve()\n    }\n    return dispatch(getProjects()) // TODO: Think about keeping 401 or kick them out before\n}\n\nexport const deleteProject = (id) => (dispatch) => {\n    if (window.confirm('Are you sure?')) { // TODO: Add modals\n        return axios.delete(`/api/project/${id}`)\n            .then(() => dispatch(getProjects()))\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\n\nimport Button from '../../../components/button'\nimport {Link} from 'react-router-dom'\n\nimport {deleteProject} from '../actions'\n\nclass ProjectItem extends Component {\n    render() {\n        const {project, deleteProject} = this.props\n        return (\n            <div className=\"t-project-item container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\">Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/addProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\">Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <Button onClick={() => deleteProject(project.projectIdentifier)}>\n                                    <li className=\"list-group-item delete\">\n                                        <i className=\"fa fa-minus-circle pr-1\">Delete Project</i>\n                                    </li>\n                                </Button>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func,\n    project: PropTypes.object\n}\n\nconst mapDispatchToProps = {\n    deleteProject\n}\n\nexport default connect(null, mapDispatchToProps)(ProjectItem)\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"t-create-project-button btn btn-lg btn-info\">Create a Project</Link>\n        </React.Fragment>\n    )\n}\n\nexport default CreateProjectButton\n","import React, { Component } from 'react'\nimport template from '../../template'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport PropTypes from 'prop-types'\n\nimport ProjectItem from './partials/ProjectItem'\nimport CreateProjectButton from './partials/CreateProjectButton'\n\nimport { getProjectsList } from '../../store/project/selectors'\n\nclass Dashboard extends Component {\n    render() {\n        const { projects } = this.props\n        return (\n            <div className=\"t-dashboard projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br />\n                            <CreateProjectButton />\n                            <br />\n                            <hr />\n                            {projects.map((project, idx) => <ProjectItem key={idx} project={project} />)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nDashboard.propTypes = {\n    projects: PropTypes.array\n}\n\nconst mapStateToProps = createPropsSelector({\n    projects: getProjectsList\n})\n\nexport default template(connect(mapStateToProps)(Dashboard))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\n\nimport Button from '../../../components/button'\nimport {Link} from 'react-router-dom'\n\nimport {deleteProject} from '../actions'\n\nconst ProjecTask = ({projectSequence, summary, acceptanceCriteria, priority, deleteProject, projectIdentifier}) => {\n    let priorityClass = ''\n    let priorityString = ''\n    if (priority === 1) {\n        priorityClass = 'bg-danger text-light'\n        priorityString = 'HIGH'\n    } else if (priority === 2) {\n        priorityClass = 'bg-warning text-light'\n        priorityString = 'MEDIUM'\n    } else if (priority === 3) {\n        priorityClass = 'bg-info text-light'\n        priorityString = 'LOW'\n    }\n    return (\n        <div className=\"t-project-task\">\n            <div className=\"card mb-1 bg-light\">\n                <div className={`card-header text-primary ${priorityClass}`}>ID: {projectSequence} -- Priority: {priorityString}</div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{summary}</h5>\n                    <p className=\"card-text text-truncate \">{acceptanceCriteria}</p>\n                    <Link to={`/addProjectTask/${projectIdentifier}/${projectSequence}`} className=\"btn btn-primary\">View / Update</Link>\n                    <Button onClick={() => { deleteProject(projectIdentifier, projectSequence) }} className=\"btn btn-danger ml-4\">Delete</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nProjecTask.propTypes = {\n    deleteProject: PropTypes.func,\n    projectSequence: PropTypes.string,\n    summary: PropTypes.string,\n    acceptanceCriteria: PropTypes.string,\n    priority: PropTypes.number,\n    projectIdentifier: PropTypes.string\n}\n\nconst mapDispatchToProps = {\n    deleteProject\n}\n\nexport default connect(null, mapDispatchToProps)(ProjecTask)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ProjectTask from './ProjectTask'\n\nclass Backlog extends Component {\n    render() {\n        const {tasksList} = this.props\n        const todoTasks = []\n        const inProgressTasks = []\n        const doneTasks = []\n        tasksList && tasksList.forEach((task, idx) => {\n            if (task.status === 'IN_PROGRESS') {\n                inProgressTasks.push(<ProjectTask key={idx} {...task} />)\n            } else if (task.status === 'DONE') {\n                doneTasks.push(<ProjectTask key={idx} {...task} />)\n            } else {\n                todoTasks.push(<ProjectTask key={idx} {...task} />)\n            }\n        })\n        return (\n            <div className=\"t-backlog\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-secondary text-white\">\n                                    <h3>TO DO</h3>\n                                </div>\n                            </div>\n                            {todoTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-primary text-white\">\n                                    <h3>In Progress</h3>\n                                </div>\n                            </div>\n                            {inProgressTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-success text-white\">\n                                    <h3>Done</h3>\n                                </div>\n                            </div>\n                            {doneTasks}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nBacklog.propTypes = {\n    tasksList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        projectSequence: PropTypes.string,\n        summary: PropTypes.string,\n        acceptanceCriteria: PropTypes.string,\n        status: PropTypes.string,\n        priority: PropTypes.number,\n        dueDate: PropTypes.string,\n        created_At: PropTypes.string,\n        updated_At: PropTypes.string,\n        projectIdentifier: PropTypes.string\n    }))\n}\n\nexport default Backlog\n","import React, { Component } from 'react'\nimport template from '../../template'\nimport {connect} from 'react-redux'\nimport {createPropsSelector} from 'reselect-immutable-helpers'\nimport PropTypes from 'prop-types'\n\nimport {Link} from 'react-router-dom'\nimport Backlog from './partials/Backlog'\nimport { getCurrentTaskList, getProjectNotFoundError } from './selectors';\nimport { setCurrentTaskList } from './actions';\n\nclass ProjectBoard extends Component {\n    render() {\n        const {tasksList, match, projectNotFoundError} = this.props\n        return (\n            <div className=\"t-project-board\">\n                {!projectNotFoundError ?\n                    <div className=\"container\">\n                        <Link to={`/addProjectTask/${match.params.id}`} className=\"btn btn-primary mb-3\">\n                            <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                        </Link>\n                        <br />\n                        <hr />\n                        {tasksList && tasksList.length ?\n                            <Backlog tasksList={tasksList} />\n                        :\n                            <div className=\"alert alert-info text-center\">No Project Tasks on this board</div>\n                        }\n                    </div>\n                :\n                    <div className=\"alert alert-danger text-center container\">{projectNotFoundError}</div>\n                }\n            </div >\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    projectNotFoundError: PropTypes.string,\n    tasksList: PropTypes.array,\n    setCurrentTaskList: PropTypes.func\n}\n\nconst mapStateToProps = createPropsSelector({\n    tasksList: getCurrentTaskList,\n    projectNotFoundError: getProjectNotFoundError\n})\n\nconst mapDispatchToProps = {\n    setCurrentTaskList\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(ProjectBoard))\n","import {createSelector} from 'reselect'\nimport {createGetSelector} from 'reselect-immutable-helpers'\n\nimport {getUi} from '../../store/selectors'\n\nexport const getProjectTask = createSelector(getUi, ({projectTask}) => projectTask)\nexport const getCurrentProject = createGetSelector(getProjectTask, 'currentProject')\nexport const getCurrentTask = createGetSelector(getProjectTask, 'currentTask')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport template from '../../template'\n\nimport { ADD_PROJECT_FORM_TASK } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport {Link} from 'react-router-dom'\nimport FormField from '../../components/form-field'\n\nimport {addProjectTask, setCurrentTask} from './actions'\nimport { getCurrentTask } from './selectors';\n\nclass AddProjectTask extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentWillUnmount() {\n        this.props.setCurrentTask({currentTask: null})\n    }\n\n    onSubmit(formValues) {\n        const {history, addProjectTask, match, initialValues} = this.props\n        formValues.isUpdate = initialValues !== null\n        return addProjectTask(formValues, match.params.id, history)\n    }\n\n    render() {\n        const {error, handleSubmit, match} = this.props\n        return (\n            <div className=\"t-add-project-task\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${match.params.id}`} className=\"btn btn-light\">Back to Project Board</Link>\n                            <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form id={ADD_PROJECT_FORM_TASK} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Project Task Summary\" name=\"summary\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"textarea\" placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" label=\"Due Date\" name=\"dueDate\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"select\" name=\"priority\">\n                                        <select className=\"form-control form-control-lg\">\n                                            <option value={0}>Select Priority</option>\n                                            <option value={1}>High</option>\n                                            <option value={2}>Medium</option>\n                                            <option value={3}>Low</option>\n                                        </select>\n                                    </FormField>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <FormField type=\"select\" name=\"status\">\n                                        <select className=\"form-control form-control-lg\">\n                                            <option value=\"\">Select Status</option>\n                                            <option value=\"TO_DO\">TO DO</option>\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                            <option value=\"DONE\">DONE</option>\n                                        </select>\n                                    </FormField>\n                                </div>\n\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func,\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    initialValues: PropTypes.object,\n    setCurrentTask: PropTypes.func\n}\n\nconst AddProjectTaskForm = reduxForm({\n    form: ADD_PROJECT_FORM_TASK\n})(AddProjectTask)\n\nconst mapStateToProps = createPropsSelector({\n    initialValues: getCurrentTask\n})\n\nconst mapDispatchToProps = {\n    addProjectTask,\n    setCurrentTask\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(AddProjectTaskForm))\n","import React, { Component } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"t-home\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Spring React Start Client</h1>\n                                <p className=\"lead\">Create your account to join active projects or start you own</p>\n                                <hr />\n                                <Link to=\"/register.html\" className=\"btn btn-lg btn-primary mr-2\">Sign Up</Link>\n                                <Link to=\"/login.html\" className=\"btn btn-lg btn-secondary mr-2\">Login</Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport template from '../../template'\nimport {reduxForm} from 'redux-form'\nimport {connect} from 'react-redux'\nimport {createPropsSelector} from 'reselect-immutable-helpers'\n\nimport { LOGIN_FORM } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { login } from './actions'\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onSubmit(formValues) {\n        const {history, login} = this.props\n        return login(formValues, history)\n    }\n\n    render() {\n        const {handleSubmit, error} = this.props\n\n        return (\n            <div className=\"t-login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form id={LOGIN_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n\n                                <div className=\"form-group\">\n                                    <FormField type=\"email\" placeholder=\"Email Address\" name=\"username\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Password\" name=\"password\" />\n                                </div>\n                                <Button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    login: PropTypes.func\n}\n\nconst LoginForm = reduxForm({\n    form: LOGIN_FORM\n})(Login)\n\nconst mapStateToProps = createPropsSelector({\n\n})\n\nconst mapDispatchToProps = {\n    login\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(LoginForm))\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport template from '../../template'\nimport {reduxForm} from 'redux-form'\nimport {connect} from 'react-redux'\nimport {createPropsSelector} from 'reselect-immutable-helpers'\n\nimport { REGISTER_FORM } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { registerUser } from './actions'\n\nclass Register extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onSubmit(formValues) {\n        const {history, registerUser} = this.props\n        return registerUser(formValues, history)\n    }\n\n    render() {\n        const {handleSubmit, error} = this.props\n\n        return (\n            <div className=\"t-register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form id={REGISTER_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Name\" name=\"fullName\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"email\" placeholder=\"Email Address\" name=\"username\" />\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Password\" name=\"password\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Confirm Password\"\n                                        name=\"confirmPassword\" />\n                                </div>\n                                <Button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nRegister.propTypes = {\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    registerUser: PropTypes.func\n}\n\nconst RegisterForm = reduxForm({\n    form: REGISTER_FORM\n})(Register)\n\nconst mapStateToProps = createPropsSelector({\n\n})\n\nconst mapDispatchToProps = {\n    registerUser\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(RegisterForm))\n","import React, { Component } from 'react'\n\nexport default class NotFound extends Component {\n    render() {\n        return (\n            <div>\n                Not Found\n      </div>\n        )\n    }\n}\n","export const initHome = () => (dispatch) => {\n    return Promise.resolve()\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './containers/app/App'\nimport AddProject from './containers/add-project/AddProject'\nimport Dashboard from './containers/dashboard/Dashboard'\nimport ProjectBoard from './containers/project-board/ProjectBoard'\nimport AddProjectTask from './containers/add-project-task/AddProjectTask'\nimport Home from './containers/home/Home'\nimport Login from './containers/user-management/Login'\nimport Register from './containers/user-management/Register'\nimport NotFound from './containers/not-found/NotFound'\n\nimport { initAddProject } from './containers/add-project/actions'\nimport { initDashboard } from './containers/dashboard/actions'\nimport { initProjectBoard } from './containers/project-board/actions'\nimport { initAddProjectTask } from './containers/add-project-task/actions'\nimport { initHome } from './containers/home/actions'\nimport { initLogin, initRegister } from './containers/user-management/actions'\n\nexport default class Router extends Component {\n    render() {\n        const { store } = this.props\n        // TODO Think about creating a secured route and a custom route so the router looks cleaner.. just a maybe\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/\" render={(routeProps) => <Home dispatch={store.dispatch} {...routeProps} fetchAction={initHome} />} />\n                            <Route exact path=\"/login(.html)?\" render={(routeProps) => <Login dispatch={store.dispatch} {...routeProps} fetchAction={initLogin} />} />\n                            <Route exact path=\"/register(.html)?\" render={(routeProps) => <Register dispatch={store.dispatch} {...routeProps} fetchAction={initRegister} />} />\n                            <Route exact path=\"/dashboard(.html)?\" render={(routeProps) => <Dashboard dispatch={store.dispatch} {...routeProps} fetchAction={initDashboard} />} />\n                            <Route exact path=\"/addProject/:id?\" render={(routeProps) => <AddProject dispatch={store.dispatch} {...routeProps} fetchAction={initAddProject} />} />\n                            <Route exact path=\"/projectBoard/:id?\" render={(routeProps) => <ProjectBoard dispatch={store.dispatch} {...routeProps} fetchAction={initProjectBoard} />} />\n                            <Route exact path=\"/addProjectTask/:id?/:sequence?\" render={(routeProps) => <AddProjectTask dispatch={store.dispatch} {...routeProps} fetchAction={initAddProjectTask} />} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </App>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport Router from './Router';\n\nReactDOM.render(<Router store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}