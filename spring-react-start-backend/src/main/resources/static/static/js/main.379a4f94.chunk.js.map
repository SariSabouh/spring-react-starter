{"version":3,"sources":["serviceWorker.js","store/selectors.js","store/user/selectors.js","store/project/selectors.js","containers/project-board/selectors.js","store/project/actions.js","containers/add-project/actions.js","containers/add-project/reducer.js","containers/project-board/actions.js","containers/project-board/reducer.js","containers/add-project-task/actions.js","containers/add-project-task/reducer.js","containers/reducers.js","store/project/reducer.js","store/user/actions.js","store/user/reducer.js","store/index.js","utils/a11y-utils.js","components/icon/index.jsx","components/button/index.jsx","utils/request-utils.js","containers/user-management/actions.js","containers/header/Header.jsx","containers/app/App.jsx","template.jsx","components/field/index.jsx","components/form-field/index.jsx","containers/add-project/selectors.js","containers/add-project/AddProject.jsx","store/form/constants.js","containers/dashboard/actions.js","containers/dashboard/partials/ProjectItem.jsx","containers/dashboard/partials/CreateProjectButton.jsx","containers/dashboard/Dashboard.jsx","containers/project-board/partials/ProjectTask.jsx","containers/project-board/partials/Backlog.jsx","containers/project-board/ProjectBoard.jsx","containers/add-project-task/selectors.js","containers/add-project-task/AddProjectTask.jsx","containers/home/Home.jsx","containers/user-management/Login.jsx","containers/user-management/Register.jsx","containers/not-found/NotFound.jsx","containers/home/actions.js","Router.jsx","index.js"],"names":["Boolean","window","location","hostname","match","getUi","_ref","ui","getUser","_ref4","user","isUserLoggedIn","createGetSelector","getUsername","getProjectsList","_ref2","project","getProjectBoard","createSelector","projectBoard","getCurrentTaskList","getProjectNotFoundError","receiveProjects","createAction","receiveProject","receiveProjectsTasks","getProjects","dispatch","axios","get","then","response","projectsList","data","catch","e","status","console","error","getProjectTasksById","id","concat","tasksList","setCurrentProject","initAddProject","routeProps","getStore","history","params","find","projectIdentifier","Promise","resolve","currentProject","push","initialState","Immutable","Map","handleActions","Object","defineProperty","state","payload","mergeDeep","setCurrentTaskList","receiveErrorMessage","updateProductTasks","projectNotFound","undefined","initProjectBoard","err","objectSpread","fromJS","_handleActions","merge","setCurrentTask","initAddProjectTask","_match$params","sequence","task","projectSequence","getProjectTask","currentTask","combineReducers","projectTask","reducer_handleActions","update","_ref3","projectList","addProject","i","length","set","receiveUserData","setLoggedIn","user_reducer_handleActions","reducers","rootReducer","projectReducer","form","formReducer","userReducer","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","serialize","immutable","compose","applyMiddleware","thunk","composeEnhancers","createStore","createStoreWithMiddleware","keyMap","onKeyUpWrapper","onClick","keycode","event","_len","arguments","otherArgs","Array","_key","keyCode","apply","toConsumableArray","onKeyUpHelper","uuid","Icon","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","prefix","name","title","size","className","style","a11y","role","aria-hidden","sizeClass","classes","classNames","react_default","a","createElement","assign","aria-labelledby","xlinkHref","React","Component","defaultProps","Button","childrenNodes","_childrenNodes","to","icon","iconSize","iconClassName","innerClassName","showIconText","text","type","children","disabled","value","openInNewTab","c--anchor","c--icon-only","innerClass","iconClass","c--has-siblings","textClass","u-visually-hidden","attrs","onKeyUp","components_icon","key","keys","forEach","test","Link","target","setJWTToken","token","keyName","sessionStorage","setItem","defaults","headers","common","Authorization","decodedToken","jwt_decode","fullName","username","authenticated","removeItem","removeItemFromBrowserStorage","initSession","authorizationToken","auth","getItem","exp","Date","now","validateForm","formValues","isRegister","errors","_error","password","confirmPassword","isEmail","checkLoginStatus","initLogin","initRegister","Header","logout","components_button","data-toggle","data-target","mapStateToProps","createPropsSelector","mapDispatchToProps","connect","App","header_Header","PureComponent","withRouter","template","WrappedComponent","Template","_React$Component","inherits","createClass","_this2","fetchAction","dispatchRouteChange","displayName","getDisplayName","getUniqueId","Field","idForLabel","inputId","isCheckRadio","shouldStackLabelInput","bind","assertThisInitialized","shouldPlaceLabelAtEnd","buildEventHandler","labelPosition","eventHandlerName","customHandler","customEventHandlers","input","_this3","label","hint","caption","shouldShowErrorsInstantly","childDisabled","childChecked","onlyChild","Children","count","newChildren","map","child","idx","childProps","onBlur","onFocus","onChange","onDrop","onDragStart","aria-invalid","aria-required","required","checked","isRequired","cloneElement","metaProps","meta","shouldShowReduxError","touched","active","dirty","reduxFormError","fieldError","c--is-check-radio","c--error","c--required","c--disabled","c--checked","innerClasses","c--stack","labelClasses","c--end","inputClasses","htmlFor","FormField","placeholder","rowClasses","defaultChecked","inputOptions","inputField","es_Field","component","getProject","getCurrentProject","AddProject","onSubmit","createProject","_this$props2","handleSubmit","initialValues","noValidate","form_field","AddProjectForm","reduxForm","post","reject","SubmissionError","initDashboard","ProjectItem","deleteProject","projectName","description","confirm","delete","CreateProjectButton","Fragment","Dashboard","projects","partials_CreateProjectButton","partials_ProjectItem","backlogId","projectTaskId","summary","acceptanceCriteria","priority","priorityClass","priorityString","Backlog","todoTasks","inProgressTasks","doneTasks","ProjectTask","ProjectBoard","projectNotFoundError","partials_Backlog","getCurrentTask","AddProjectTask","addProjectTask","isUpdate","AddProjectTaskForm","validateProjectTaskForm","patch","Home","Login","login","LoginForm","Register","registerUser","RegisterForm","NotFound","initHome","Router","react_redux_es","BrowserRouter","app_App","Switch","Route","exact","path","render","Home_Home","user_management_Login","user_management_Register","dashboard_Dashboard","add_project_AddProject","project_board_ProjectBoard","add_project_task_AddProjectTask","ReactDOM","Router_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.379a4f94.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","export const getUi = ({ ui }) => ui\nexport const getProjects = ({ project }) => project\nexport const getForm = ({ form }) => form\nexport const getUser = ({ user }) => user\n","import { createGetSelector } from 'reselect-immutable-helpers'\n\nimport { getUser } from '../selectors'\n\nexport const isUserLoggedIn = createGetSelector(getUser, 'authenticated')\nexport const getUsername = createGetSelector(getUser, 'username')\n","import { createGetSelector } from 'reselect-immutable-helpers'\n\nimport { getProjects } from '../selectors'\n\nexport const getProjectsList = createGetSelector(getProjects, 'projectsList') // eslint-disable-line import/prefer-default-export\n// There will be other exports usually\n","import { createSelector } from 'reselect'\nimport { createGetSelector } from 'reselect-immutable-helpers'\n\nimport { getUi } from '../../store/selectors'\n\nexport const getProjectBoard = createSelector(getUi, ({ projectBoard }) => projectBoard)\nexport const getCurrentTaskList = createGetSelector(getProjectBoard, 'tasksList')\nexport const getProjectNotFoundError = createGetSelector(getProjectBoard, 'projectNotFound')\n","import axios from 'axios'\nimport { createAction } from 'redux-actions'\n\nimport { getProjectsList } from './selectors'\nimport { getCurrentTaskList } from '../../containers/project-board/selectors'\n\nexport const receiveProjects = createAction('Receive Projects List')\nexport const receiveProject = createAction('Receive Project Data')\nexport const receiveProjectsTasks = createAction('Receive Projects Tasks List')\nexport const receiveProjectTask = createAction('Receive Project Task')\n\nexport const getProjects = () => (dispatch) => {\n    axios.get('/api/project/all')\n        .then((response) => dispatch(receiveProjects({ projectsList: response.data })))\n        .catch((e) => e.response.status === 401 && console.error('Please log in'))\n}\n\nexport const getProject = (id) => (dispatch, getStore) => {\n    const projects = getProjectsList(getStore())\n    const project = projects.find((project) => project.projectIdentifier === id)\n    if (project) {\n        return new Promise((resolve) => resolve(project))\n    }\n    return axios.get(`/api/project/${id}`)\n        .then((response) => {\n            dispatch(receiveProject(response.data))\n            return response.data\n        })\n}\n\nexport const getProjectTasksById = (id) => (dispatch) => axios.get(`/api/backlog/${id}`)\n    .then((response) => dispatch(receiveProjectsTasks({ tasksList: response.data, id })))\n\nexport const getProjectTask = (id, sequence) => (dispatch, getStore) => {\n    const tasksList = getCurrentTaskList(getStore())\n    const task = tasksList.find((task) => task.projectSequence === sequence)\n    if (task) {\n        return new Promise((resolve) => resolve(task))\n    }\n    return dispatch(getProjectTasksById(id))\n        .then((response) => {\n            const updatedTasksList = response.payload.tasksList\n            const updatedTask = updatedTasksList.find((task) => task.projectSequence === sequence)\n            return updatedTask\n        })\n}\n\n// TODO add sass-lint\n","import axios from 'axios'\nimport { createAction } from 'redux-actions'\nimport { SubmissionError } from 'redux-form'\n\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nimport { getProject } from '../../store/project/actions'\n\nexport const setCurrentProject = createAction('Receive Current Project')\n\nexport const initAddProject = (routeProps) => (dispatch, getStore) => {\n    const { match, history } = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        match.params.id &&\n            dispatch(getProject(match.params.id))\n                .then((project) => dispatch(setCurrentProject({ currentProject: project })))\n                .catch(() => history.push('/dashboard'))\n    }\n    return Promise.resolve()\n}\n\nexport const createProject = (formValues, history) => (dispatch) => {\n    if (!Object.keys(formValues).length) {\n        return Promise.reject(new SubmissionError({ _error: 'Please fill form' }))\n    }\n    return axios.post('/api/project', formValues)\n        .then(() => history.push('/dashboard'))\n        .catch((err) => Promise.reject(new SubmissionError({ ...err.response.data })))\n}\n","import { handleActions } from 'redux-actions'\nimport Immutable from 'immutable'\n\nimport { setCurrentProject } from './actions'\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [setCurrentProject]: (state, { payload }) => state.mergeDeep(payload)\n}, initialState)\n","import axios from 'axios'\nimport { createAction } from 'redux-actions'\n\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nimport { getProjectTasksById } from '../../store/project/actions'\n\nexport const setCurrentTaskList = createAction('Receive Current Task List')\nexport const receiveErrorMessage = createAction('Receive Error Message')\n\nexport const updateProductTasks = (id) => (dispatch) => {\n    dispatch(receiveErrorMessage({ projectNotFound: undefined }))\n    return dispatch(getProjectTasksById(id))\n        .then(({ payload }) => dispatch(setCurrentTaskList(payload)))\n}\n\nexport const initProjectBoard = (routeProps) => (dispatch, getStore) => {\n    const { match, history } = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        match.params.id && dispatch(updateProductTasks(match.params.id))\n            .catch((err) => {\n                dispatch(receiveErrorMessage({ ...err.response.data }))\n            })\n    }\n    return Promise.resolve()\n}\n\nexport const deleteProject = (backlogId, projectTaskId) => (dispatch) => {\n    if (window.confirm('Are you sure?')) { // TODO: Add modals\n        return axios.delete(`/api/backlog/${backlogId}/${projectTaskId}`)\n            .then(() => dispatch(updateProductTasks(backlogId)))\n    }\n    return false\n}\n","import { handleActions } from 'redux-actions'\nimport { fromJS } from 'immutable'\n\nimport { setCurrentTaskList, receiveErrorMessage } from './actions'\n\nconst initialState = fromJS({\n    tasksList: []\n})\n\nexport default handleActions({\n    [setCurrentTaskList]: (state, { payload }) => state.merge({ tasksList: payload.tasksList }),\n    [receiveErrorMessage]: (state, { payload }) => state.merge(payload),\n}, initialState)\n","import axios from 'axios'\nimport { createAction } from 'redux-actions'\nimport { SubmissionError } from 'redux-form'\n\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nimport { getProjectTask } from '../../store/project/actions'\n\nexport const setCurrentTask = createAction('Receive Current Task')\n\nexport const initAddProjectTask = (routeProps) => (dispatch, getStore) => {\n    const { match, history } = routeProps\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n    } else {\n        const { id, sequence } = match.params\n        id && sequence &&\n            dispatch(getProjectTask(id, sequence))\n                .then((task) => dispatch(setCurrentTask({ currentTask: task })))\n                .catch(() => history.push('/dashboard'))\n    }\n    return Promise.resolve()\n}\n\nconst validateProjectTaskForm = (formValues) => {\n    const errors = {}\n\n    if (!Object.keys(formValues).length) {\n        return {\n            _error: 'Please fill form'\n        }\n    }\n\n    if (!formValues.summary) {\n        errors.summary = 'Summary can\\'t be empty'\n    }\n\n    return errors\n}\n\nexport const addProjectTask = (formValues, backlogId, history) => (dispatch) => {\n    const errors = validateProjectTaskForm(formValues)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n    if (formValues.isUpdate) {\n        return axios.patch(`/api/backlog/${backlogId}/${formValues.projectSequence}`, formValues)\n            .then(() => history.push(`/projectBoard/${backlogId}`))\n            .catch((err) => Promise.reject(new SubmissionError({ ...err.response.data })))\n    }\n    return axios.post(`/api/backlog/${backlogId}`, formValues)\n        .then(() => history.push(`/projectBoard/${backlogId}`))\n        .catch((err) => Promise.reject(new SubmissionError({ ...err.response.data })))\n}\n","import { handleActions } from 'redux-actions'\nimport Immutable from 'immutable'\nimport { setCurrentTask } from './actions'\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [setCurrentTask]: (state, { payload }) => state.mergeDeep(payload)\n}, initialState)\n","import { combineReducers } from 'redux'\n\nimport project from './add-project/reducer'\nimport projectBoard from './project-board/reducer'\nimport projectTask from './add-project-task/reducer'\n\nexport default combineReducers({\n    project,\n    projectBoard,\n    projectTask\n})\n","import { handleActions } from 'redux-actions'\nimport { fromJS } from 'immutable'\n\nimport { receiveProjects, receiveProject, receiveProjectsTasks } from './actions'\n\nconst initialState = fromJS({\n    projectsList: []\n})\n\nexport default handleActions({\n    [receiveProjects]: (state, { payload }) => state.merge(payload),\n    [receiveProject]: (state, { payload }) => state.update('projectsList', (projectsList) => projectsList.push({ ...payload })),\n    [receiveProjectsTasks]: (state, { payload }) => {\n        const projectList = state.get('projectsList')\n        let addProject = true\n        for (let i = 0; i < projectList.length; i++) {\n            const project = projectList[i]\n            if (project.projectIdentifier === payload.id) {\n                project.tasksList = payload.tasksList\n                addProject = false\n                break\n            }\n        }\n\n        if (addProject) {\n            return state.update('projectsList', (projectsList) => projectsList.push({ projectIdentifier: payload.id, tasksList: payload.tasksList }))\n        }\n        return state.set('projectsList', projectList)\n    },\n}, initialState)\n","import { createAction } from 'redux-actions'\n\nexport const receiveUserData = createAction('Receive User Data')\nexport const setLoggedIn = createAction('Set user log in status')\n","import { handleActions } from 'redux-actions'\nimport Immutable from 'immutable'\n\nimport { receiveUserData, setLoggedIn } from './actions'\n\nconst initialState = Immutable.Map()\n\nexport default handleActions({\n    [receiveUserData]: (state, { payload }) => state.merge(payload),\n    [setLoggedIn]: (state, { payload }) => state.merge(payload)\n}, initialState)\n","import { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport Immutable from 'immutable'\nimport thunk from 'redux-thunk'\nimport { reducer as formReducer } from 'redux-form'\n\nimport rootReducer from '../containers/reducers'\nimport projectReducer from './project/reducer'\nimport userReducer from './user/reducer'\n\nconst reducers = combineReducers({\n    ui: rootReducer,\n    project: projectReducer,\n    form: formReducer,\n    user: userReducer\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        serialize: {\n            immutable: Immutable\n        }\n    })\n    : compose\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunk))(createStore)\nconst store = createStoreWithMiddleware(reducers)\n\nexport default store\n","/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2017 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\n// Helper object to quickly and clearly indicate keyCodes\nexport const keyMap = {\n    // Focus\n    tab: 9,\n    // Navigation\n    left: 37,\n    up: 38,\n    right: 39,\n    down: 40,\n    // Action\n    enter: 13,\n    escape: 27,\n    space: 32\n}\n\n// Helper method to ensure keyboard can trigger onClick event\nexport const onKeyUpHelper = (event, onClick, keycode, otherArgs = {}) => {\n    // Default key is (space)\n    if (event.keyCode === keycode || event.keyCode === keyMap.space) {\n        if (typeof onClick === 'function') {\n            onClick(event, ...otherArgs)\n        }\n    }\n}\n\n// HOF to make using onKeyUpHelper easier\nexport const onKeyUpWrapper = (onClick, keycode) => (event, ...otherArgs) => onKeyUpHelper(event, onClick, keycode, otherArgs)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst uuid = (() => {\n    let i = 0\n    return () => i++\n})()\n\n/**\n * `Icon` component renders an SVG that uses the chosen symbol from the SVG sprite present on the page.\n */\n\nclass Icon extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.id = `icon-${uuid()}`\n    }\n\n    render() {\n        const {\n            prefix,\n            name,\n            title,\n            size,\n            className,\n            style\n        } = this.props\n\n        const a11y = (title.length) ? { role: 'img' } : { 'aria-hidden': 'true' }\n        const sizeClass = `c--${size}`\n\n        const classes = classNames('c-icon', {\n            [sizeClass]: !!size\n        }, className)\n\n        return (\n            <svg {...a11y}\n                className={classes}\n                title={title}\n                aria-labelledby={this.id}\n                style={style}\n            >\n                <title id={this.id}>{title}</title>\n                <use role=\"presentation\" xlinkHref={`#${prefix}-${name}`} />\n            </svg>\n        )\n    }\n}\n\nIcon.defaultProps = {\n    name: '',\n    title: '',\n    prefix: 'pw',\n    style: {}\n}\n\nIcon.propTypes = {\n    /**\n     * Identifier for the desired icon. Usually the filename, sans its prefix.\n     * For example, if the target icon is `c-chevron-up.svg`, the name\n     * is `chevron-up`.\n     */\n    name: PropTypes.string.isRequired,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n     * The prefix is the first part of the icon name/id. If you're using a\n     * different icon set, the prefix may need to be modified.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The size of the icon, controlled by CSS.\n     */\n    size: PropTypes.string,\n\n    /**\n     * Custom `style` attribute.\n     */\n    style: PropTypes.object,\n\n    /**\n     * **Beware** that ommitting a `title` will leave the icon **invisible** to\n     * screen readers. If included, screen readers will read and treat the\n     * icon like an image with alt text.\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n}\n\nexport default Icon\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { Link } from 'react-router-dom'\nimport { onKeyUpWrapper } from '../../utils/a11y-utils'\n\nimport Icon from '../icon'\n\n/**\n * A styleable, accessible `<button>` component.\n */\n\nconst Button = (props) => {\n    const {\n        // Values\n        to,\n        icon,\n        iconSize,\n        iconClassName,\n        innerClassName,\n        showIconText,\n        text,\n        title,\n        type,\n\n        // Attributes\n        id,\n        children,\n        className,\n        disabled,\n        name,\n        value,\n        role,\n        openInNewTab,\n\n        // Handlers\n        onClick,\n    } = props\n\n    const classes = classNames('c-button', {\n        'c--anchor': !!to,\n        'c--icon-only': !!icon && !children\n    }, className)\n    const innerClass = classNames('c-button__inner', innerClassName)\n    const iconClass = classNames('c-button__icon', iconClassName, {\n        'c--has-siblings': children || (title && showIconText)\n    })\n    const textClass = classNames('c-button__text', {\n        'u-visually-hidden': !showIconText\n    })\n    const attrs = {\n        to,\n        id,\n        disabled,\n        name,\n        value,\n        role,\n        onClick,\n        onKeyUp: onKeyUpWrapper(onClick),\n        className: classes\n    }\n\n    let childrenNodes\n\n    if (icon) {\n        childrenNodes = [\n            <Icon className={iconClass} size={iconSize} name={icon} key=\"autoicon\" />,\n            title && <span className={textClass} key=\"autotitle\">{title}</span>\n        ]\n\n        if (typeof children === 'string') {\n            childrenNodes.push(children)\n        } else {\n            childrenNodes.push(\n                ...(children || [])\n            )\n        }\n    } else {\n        childrenNodes = text || children\n    }\n\n    // Add all aria and data attributes\n    Object.keys(props).forEach((key) => {\n        if (/^(aria|data)-/.test(key)) {\n            attrs[key] = props[key]\n        }\n    })\n\n    if (to) {\n        return (\n            <Link {...attrs} target={openInNewTab ? '_blank' : ''}>\n                <div className={innerClass}>{childrenNodes}</div>\n            </Link>\n        )\n    }\n    return (\n        <button {...attrs} type={type}>\n            <div className={innerClass}>{childrenNodes}</div>\n        </button>\n    )\n}\n\nButton.defaultProps = {\n    type: 'button'\n}\n\nButton.propTypes = {\n    /**\n     * Any children to be nested within this button.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n     * Defines if button is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * If specified, the component is rendered as a link, with this value set as the href.\n     */\n    to: PropTypes.string,\n\n    /**\n     * If specified, includes an icon of the given name in the button.\n     * For more information about available icons, see the [Icon component](#!/Icon).\n     */\n    icon: PropTypes.string,\n\n    /**\n     * Adds values to the class attribute in <Icon> component.\n     */\n    iconClassName: PropTypes.string,\n\n    /**\n     * If specified, will set the icon to the size of your choice.\n     */\n    iconSize: PropTypes.string,\n\n\n    /**\n     * Sets the `id` attribute of the root element.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Adds values to the class attribute of the inner container.\n     */\n    innerClassName: PropTypes.string,\n\n    /**\n     * The button's `name` attribute.\n     */\n    name: PropTypes.string,\n\n    /**\n     * For use with Buttons with an href set.\n     *\n     * If true, target=\"_blank\" will be added to the button.\n     * Only use this property if you trust the link! https://mathiasbynens.github.io/rel-noopener\n     */\n    openInNewTab: PropTypes.bool,\n\n    /**\n     * The button's `role` attribute.\n     */\n    role: PropTypes.string,\n\n    /**\n    * For use when the icon and title attributes have been defined.\n    * If false, `u-visually-hidden` class will be added to the container that wraps\n    * the title attribute. If true, `u-visually-hidden` will be removed.\n    *\n    */\n    showIconText: PropTypes.bool,\n\n    /**\n     * Text contents of the button.\n     */\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * The title to be used for accessibility (generally if `icon` is used).\n     * If showIconText is set to true, this text will be shown with the icon\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * Specifies button type, defaults to `button`.\n     */\n    type: PropTypes.oneOf(['button', 'submit']),\n\n    /**\n     * The button's `value` attribute.\n     */\n    value: PropTypes.string,\n\n    /**\n     * User-defined method for hooking into click events.\n     */\n    onClick: PropTypes.func\n}\n\nexport default Button\n","import axios from 'axios'\nimport jwt_decode from 'jwt-decode' // eslint-disable-line camelcase\n\nimport { setLoggedIn, receiveUserData } from '../store/user/actions'\n\nconst AUTH_KEY_NAME = 'sec-auth'\n\nconst getItemFromBrowserStorage = (keyName) => window.sessionStorage.getItem(keyName)\n\nconst setItemInBrowserStorage = (keyName, value) => {\n    window.sessionStorage.setItem(keyName, value)\n}\n\nconst removeItemFromBrowserStorage = (keyName) => {\n    window.sessionStorage.removeItem(keyName)\n}\n\nexport const setJWTToken = (token) => (dispatch) => {\n    if (token) {\n        setItemInBrowserStorage(AUTH_KEY_NAME, token)\n        axios.defaults.headers.common.Authorization = token\n\n        const decodedToken = jwt_decode(token)\n        dispatch(receiveUserData({ fullName: decodedToken.fullName, username: decodedToken.username }))\n        dispatch(setLoggedIn({ authenticated: true }))\n    } else {\n        removeItemFromBrowserStorage(AUTH_KEY_NAME)\n        dispatch(setLoggedIn({ authenticated: false }))\n        delete axios.defaults.headers.common.Authorization\n    }\n}\n\nconst isTokenExpired = (authorizationToken) => {\n    const { exp } = jwt_decode(authorizationToken)\n\n    const now = Date.now() / 1000\n    return exp < now\n}\n\nexport const initSession = () => (dispatch) => {\n    const auth = getItemFromBrowserStorage(AUTH_KEY_NAME)\n    if ((!auth || isTokenExpired(auth)) && axios.defaults.headers.common.Authorization) {\n        dispatch(setJWTToken())\n    } else if (auth && axios.defaults.headers.common.Authorization !== auth) {\n        dispatch(setJWTToken(auth))\n    }\n    return Promise.resolve()\n}\n","import isEmail from 'validator/lib/isEmail'\nimport axios from 'axios'\nimport { SubmissionError } from 'redux-form'\n\nimport { setJWTToken } from '../../utils/request-utils'\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nconst validateForm = (formValues, isRegister) => {\n    const errors = {}\n    if (!formValues) {\n        return {\n            _error: 'Please fill form'\n        }\n    }\n\n    const {\n        username,\n        password,\n        confirmPassword,\n        fullName\n    } = formValues\n\n    if (!username) {\n        errors.username = 'Email address is required'\n    } else if (!isEmail(username)) {\n        errors.username = 'Email address is invalid'\n    }\n\n    if (!password) {\n        errors.password = 'Password is required'\n    } else if (password.length < 6) {\n        errors.password = 'Password needs to be at least 6 characters'\n    }\n\n    if (isRegister && !confirmPassword) {\n        errors.confirmPassword = 'Confirm password is required'\n    } else if (isRegister && confirmPassword !== password) {\n        errors.confirmPassword = 'Passwords must match'\n    }\n\n    if (isRegister && !fullName) {\n        errors.fullName = 'Name is required'\n    }\n\n    return errors\n}\n\nconst checkLoginStatus = (history) => (dispatch, getStore) => {\n    if (isUserLoggedIn(getStore())) {\n        history.push('/dashboard')\n    }\n    return Promise.resolve()\n}\n\nexport const initLogin = ({ history }) => (dispatch) => {\n    dispatch(checkLoginStatus(history))\n    return Promise.resolve()\n}\n\nexport const initRegister = ({ history }) => (dispatch) => {\n    dispatch(checkLoginStatus(history))\n    return Promise.resolve()\n}\n\nexport const registerUser = (formValues, history) => (dispatch) => {\n    const errors = validateForm(formValues, true)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n\n    return axios.post('/api/users/register', formValues)\n        .then(() => history.push('/login'))\n        .catch((err) => Promise.reject(new SubmissionError({ ...err.response.data })))\n}\n\nexport const login = (formValues, history) => (dispatch) => {\n    const errors = validateForm(formValues)\n    if (errors._error || Object.keys(errors).length) {\n        return Promise.reject(new SubmissionError(errors))\n    }\n\n    return axios.post('/api/users/login', formValues)\n        .then(({ data }) => {\n            dispatch(setJWTToken(data.token))\n            history.push('/dashboard')\n        })\n        .catch((err) => Promise.reject(new SubmissionError({ ...err.response.data })))\n}\n\nexport const logout = () => (dispatch) => {\n    dispatch(setJWTToken())\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\n\nimport { Link } from 'react-router-dom'\nimport Button from '../../components/button'\n\nimport { getUsername, isUserLoggedIn } from '../../store/user/selectors'\nimport { logout } from '../user-management/actions'\n\nclass Header extends Component {\n    render() {\n        const { username, isUserLoggedIn, logout } = this.props\n        return (\n            <nav className=\"t-header navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">Personal Project Management Tool</Link>\n                    <Button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </Button>\n\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/dashboard\">Dashboard</Link>\n                            </li>\n                        </ul>\n\n                        <ul className=\"navbar-nav ml-auto\">\n                            <li className=\"nav-item\">\n                                {isUserLoggedIn ?\n                                    <div className=\"nav-link fas fa-user-circle mr-1\">Welcome {username}</div>\n                                    :\n                                    <Link className=\"nav-link \" to=\"register.html\">Sign Up</Link>\n                                }\n                            </li>\n                            <li className=\"nav-item\">\n                                {isUserLoggedIn ?\n                                    <Button className=\"nav-link\" to=\"/\" onClick={() => { logout() }}>Logout</Button>\n                                    :\n                                    <Link className=\"nav-link\" to=\"login.html\">Login</Link>\n                                }\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nHeader.propTypes = {\n    isUserLoggedIn: PropTypes.bool,\n    logout: PropTypes.func,\n    username: PropTypes.string\n}\n\nconst mapStateToProps = createPropsSelector({\n    username: getUsername,\n    isUserLoggedIn\n})\n\nconst mapDispatchToProps = {\n    logout\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\n","import React, { PureComponent } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Header from '../header/Header'\n\nclass App extends PureComponent {\n    render() {\n        return (\n            <div className=\"t-app\">\n                <Header />\n                <main id=\"app-main\" className=\"c-app__main u-flex\" role=\"main\">\n                    {this.props.children}\n                </main>\n            </div>\n        )\n    }\n}\n\nApp.propTypes = {\n    children: PropTypes.object.isRequired,\n}\n\nexport default withRouter(App)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { initSession } from './utils/request-utils'\n\nconst getDisplayName = (WrappedComponent) => WrappedComponent.displayName || WrappedComponent.name || 'Component'\n\nconst template = (WrappedComponent) => {\n    class Template extends React.Component {\n        constructor(props) {\n            super(props)\n\n            this.WrappedComponent = WrappedComponent\n        }\n\n        dispatchRouteChange({ fetchAction, dispatch, history }) {\n            this.props.initSession(history)\n                .then(() => {\n                    if (fetchAction) {\n                        dispatch(fetchAction(this.props))\n                    }\n                })\n        }\n\n        componentWillMount() {\n            this.dispatchRouteChange(this.props)\n        }\n\n        render() {\n            return (<WrappedComponent {...this.props} />)\n        }\n    }\n    Template.WrappedComponent = WrappedComponent\n    Template.displayName = `Template(${getDisplayName(WrappedComponent)})`\n    Template.propTypes = {\n        dispatch: PropTypes.func,\n        location: PropTypes.object,\n        initSession: PropTypes.func,\n        retryingConnection: PropTypes.bool\n    }\n\n    const mapDispatchToProps = {\n        initSession\n    }\n\n    return connect(null, mapDispatchToProps)(Template)\n}\n\nexport default template\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nconst getUniqueId = (() => {\n    let i = 0\n\n    return () => `field-${i++}`\n})()\n\n/**\n * Related components:\n *\n * * [FieldRow](#!/FieldRow)\n * * [FieldSet](#!/FieldSet)\n *\n * `Field` is a wrapper around a single form input that standardizes layout\n * of labels, hints and errors when using `redux-form`.\n *\n * It expects to receive an `<input>`, `<select>`, `<textarea>` or a custom\n * form-input component. Custom inputs should be compatible with redux-form\n * which typically means accepting `onChange`, `onBlur` and `value` props.\n */\nclass Field extends React.Component {\n    constructor(props) {\n        super(props)\n\n        if (props.idForLabel) {\n            this.inputId = props.idForLabel\n        } else {\n            this.inputId = getUniqueId()\n        }\n\n        this.isCheckRadio = false\n        this.shouldStackLabelInput = this.shouldStackLabelInput.bind(this)\n        this.shouldPlaceLabelAtEnd = this.shouldPlaceLabelAtEnd.bind(this)\n        this.buildEventHandler = this.buildEventHandler.bind(this)\n    }\n\n    shouldStackLabelInput() {\n        if (!this.props.labelPosition) {\n            return !this.isCheckRadio\n        }\n        return this.props.labelPosition === 'top'\n    }\n\n    shouldPlaceLabelAtEnd() {\n        if (!this.props.labelPosition) {\n            return this.isCheckRadio\n        }\n        return this.props.labelPosition === 'end'\n    }\n\n    buildEventHandler(eventHandlerName) {\n        const customHandler = this.props.customEventHandlers[eventHandlerName]\n        const { input } = this.props\n\n        if (input) {\n            return typeof customHandler === 'function' ? (e) => {\n                this.props.input[eventHandlerName](e)\n                customHandler(e)\n            } : this.props.input[eventHandlerName]\n        }\n        return customHandler\n    }\n\n    render() {\n        const {\n            label,\n            hint,\n            error,\n            caption,\n            className,\n            children,\n            shouldShowErrorsInstantly,\n            customEventHandlers\n        } = this.props\n\n        let childDisabled = false\n        let childChecked = false\n        const onlyChild = React.Children.count(children) === 1\n\n        const newChildren = React.Children.map(children, (child, idx) => {\n            let childProps = {}\n\n            const isFormControl = (\n                child.type === 'input' ||\n                child.type === 'select' ||\n                child.type === 'textarea' ||\n                typeof child.type === 'function' // Custom component, can handle props\n            )\n\n            if (isFormControl) {\n                childProps = { ...this.props.input }\n            }\n\n            if (customEventHandlers) {\n                // Redux form adds it's own handlers for these events\n                // In order to add our own and prevent redux-forms being overwritten\n                // we need to build a new function that calls both\n                // Overwritting redux form's handlers will cause validation to break\n                childProps.onBlur = this.buildEventHandler('onBlur', childProps)\n                childProps.onFocus = this.buildEventHandler('onFocus', childProps)\n                childProps.onChange = this.buildEventHandler('onChange', childProps)\n                childProps.onDrop = this.buildEventHandler('onDrop', childProps)\n                childProps.onDragStart = this.buildEventHandler('onDragStart', childProps)\n            }\n\n            childProps = {\n                ...childProps,\n                'aria-invalid': !!error,\n                'aria-required': child.props.required,\n                ...child.props\n            }\n\n            if (child.props.disabled) {\n                childDisabled = true\n            }\n\n            if (childProps.checked) {\n                childChecked = true\n            }\n\n            if (error) {\n                childProps.className = classNames(child.props.className, 'c--has-error')\n            }\n\n            // Give the first child the id for the field\n            if (idx === 0) {\n                childProps.id = this.inputId\n            }\n\n            if (onlyChild && (child.props.type === 'radio' || child.props.type === 'checkbox')) {\n                this.isCheckRadio = true\n            }\n\n            if (child.props.required) {\n                this.isRequired = true\n            }\n\n            return React.cloneElement(child, childProps)\n        })\n\n        const metaProps = this.props.meta\n        // eslint-disable-next-line no-mixed-operators\n        const shouldShowReduxError = metaProps && (metaProps.touched && !metaProps.active || (metaProps.dirty && shouldShowErrorsInstantly))\n        const reduxFormError = metaProps && shouldShowReduxError && metaProps.error\n        const fieldError = error || reduxFormError\n\n        const classes = classNames('c-field', {\n            'c--is-check-radio': this.isCheckRadio,\n            'c--error': fieldError,\n            'c--required': this.isRequired,\n            'c--disabled': childDisabled,\n            'c--checked': childChecked\n        }, className)\n\n        const innerClasses = classNames('c-field__inner', {\n            'c--stack': this.shouldStackLabelInput()\n        })\n\n        const labelClasses = classNames('c-field__label-wrap', {\n            'c--end': this.shouldPlaceLabelAtEnd()\n        })\n\n        const inputClasses = classNames('c-field__input')\n\n        return (\n            <div className={classes}>\n                <div className={innerClasses}>\n                    {label &&\n                        <div className={labelClasses}>\n                            <label\n                                className=\"c-field__label\"\n                                htmlFor={this.inputId}\n                            >\n                                {label}\n                            </label>\n\n                            {hint &&\n                                <div className=\"c-field__hint\">\n                                    {hint}\n                                </div>\n                            }\n                        </div>\n                    }\n\n                    <div className={inputClasses}>\n                        {newChildren}\n                    </div>\n                </div>\n\n                {fieldError &&\n                    <div className=\"c-field__error\">\n                        {fieldError}\n                    </div>\n                }\n\n                {caption &&\n                    <div className=\"c-field__caption\">\n                        {caption}\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\n\nField.propTypes = {\n    /**\n     * The input(s) to include in the field.\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * Extra information that may help the user complete this field.\n     */\n    caption: PropTypes.node,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: PropTypes.string,\n\n    /**\n    * Custom event handlers to be added to the input.\n    * If used with redux form these handlers will be called after\n    * the handlers added by redux form.\n    */\n    customEventHandlers: PropTypes.shape({\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n        onDrop: PropTypes.func,\n        onDragStart: PropTypes.func,\n        onFocus: PropTypes.func\n    }),\n    /**\n     * If this prop is passed in, the c--error class will be added to the field\n     * and the error will be shown.\n     * Also adds the aria-invalid attribute.\n     */\n    error: PropTypes.node,\n\n    /**\n     * Extra information that displays beside the label.\n     */\n    hint: PropTypes.node,\n\n    /**\n     * If provided, this will be used as the 'id' attr for the input and the 'for' attr for the label.\n     * If not provided, an id will be generated and used.\n     */\n    idForLabel: PropTypes.string,\n\n    /**\n     * Developers can ignore this prop.\n     * If our field is used with redux-form this prop gets passed by redux-form.\n     */\n    input: PropTypes.object,\n\n    /**\n     * The label for the input.\n     * The id of the input will be used as the 'for' attribute for this label,\n     * unless one is already provided.\n     */\n    label: PropTypes.node,\n\n    /**\n     * Specify the position of the label. Default behaviour:\n     * If the input is a checkbox or radio, the label will display after the input\n     * Else, the label will display on top of the input.\n     */\n    labelPosition: PropTypes.oneOf(['top', 'start', 'end']),\n\n    /**\n     * Developers can ignore this prop.\n     * If our field is used with redux-form this prop gets passed by redux-form.\n     */\n    meta: PropTypes.object,\n\n    /**\n     * Indicates whether to show field errors instantly, i.e. as the user types\n     * in a field.\n     * Set this to `false` to show errors on blur.\n     */\n    shouldShowErrorsInstantly: PropTypes.bool\n}\n\nexport default Field\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Field as ReduxFormField } from 'redux-form'\n\nimport Field from '../field'\n\nconst FormField = ({ label, type, name, placeholder, classes, rowClasses, defaultChecked, disabled, children }) => {\n    const inputOptions = {\n        type,\n        placeholder,\n        defaultChecked,\n        disabled\n    }\n\n    let inputField = <input {...inputOptions} className=\"form-control form-control-lg\" />\n    if (type === 'textarea') {\n        inputField = <textarea {...inputOptions} className=\"form-control form-control-lg\" />\n    } else if (type === 'select') {\n        inputField = children\n    }\n\n    return (\n        <div className={`c-form-field ${rowClasses}`}>\n            <ReduxFormField\n                className={classes}\n                name={name}\n                label={label}\n                type={type}\n                component={Field} >\n\n                {inputField}\n            </ReduxFormField>\n        </div>\n    )\n}\n\nFormField.propTypes = {\n    children: PropTypes.node,\n    label: PropTypes.node,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    classes: PropTypes.string,\n    defaultChecked: PropTypes.bool,\n    placeholder: PropTypes.string,\n    rowClasses: PropTypes.string\n}\n\nexport default FormField\n","import { createSelector } from 'reselect'\nimport { createGetSelector } from 'reselect-immutable-helpers'\n\nimport { getUi } from '../../store/selectors'\n\nexport const getProject = createSelector(getUi, ({ project }) => project)\nexport const getCurrentProject = createGetSelector(getProject, 'currentProject')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport template from '../../template'\n\nimport { ADD_PROJECT_FORM } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { createProject, setCurrentProject } from './actions'\nimport { getCurrentProject } from './selectors'\n\nclass AddProject extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentWillUnmount() {\n        this.props.setCurrentProject({ currentProject: undefined })\n    }\n\n    onSubmit(formValues) {\n        const { history, createProject } = this.props\n        return createProject(formValues, history)\n    }\n\n    render() {\n        const { error, handleSubmit, initialValues } = this.props\n        return (\n            <div className=\"t-add-project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Create Project form</h5>\n                            <hr />\n                            <form id={ADD_PROJECT_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Project Name Placeholder\" label=\"Project Name Label\" name=\"projectName\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField disabled={initialValues !== null} type=\"text\" placeholder=\"Project Identifier Placeholder\" label=\"Project Identifier Label\" name=\"projectIdentifier\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"textarea\" placeholder=\"Project Description Placeholder\" label=\"Project Description Label\" name=\"description\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" placeholder=\"Start Date Placeholder\" label=\"Start Date Label\" name=\"start_date\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" placeholder=\"End Date Placeholder\" label=\"End Date Label\" name=\"end_date\" />\n                                </div>\n\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    error: PropTypes.string,\n    initialValues: PropTypes.object,\n    handleSubmit: PropTypes.func,\n    setCurrentProject: PropTypes.func\n}\n\nconst AddProjectForm = reduxForm({\n    form: ADD_PROJECT_FORM\n})(AddProject)\n\nconst mapStateToProps = createPropsSelector({\n    initialValues: getCurrentProject\n})\n\nconst mapDispatchToProps = {\n    createProject,\n    setCurrentProject\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(AddProjectForm))\n","export const ADD_PROJECT_FORM = 'add-product-form'\nexport const ADD_PROJECT_FORM_TASK = 'add-product-form-task'\nexport const LOGIN_FORM = 'login-form'\nexport const REGISTER_FORM = 'register-form'\n","import axios from 'axios'\nimport { getProjects } from '../../store/project/actions'\n\nimport { isUserLoggedIn } from '../../store/user/selectors'\n\nexport const initDashboard = ({ history }) => (dispatch, getStore) => {\n    if (!isUserLoggedIn(getStore())) {\n        history.push('/login')\n        return Promise.resolve()\n    }\n    return dispatch(getProjects()) // TODO: Think about keeping 401 or kick them out before\n}\n\nexport const deleteProject = (id) => (dispatch) => {\n    if (window.confirm('Are you sure?')) { // TODO: Add modals\n        return axios.delete(`/api/project/${id}`)\n            .then(() => dispatch(getProjects()))\n    }\n    return false\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { Link } from 'react-router-dom'\nimport Button from '../../../components/button'\n\nimport { deleteProject } from '../actions'\n\nclass ProjectItem extends Component {\n    render() {\n        const { project, deleteProject } = this.props\n        return (\n            <div className=\"t-project-item container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\">Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/addProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\">Update Project Info</i>\n                                    </li>\n                                </Link>\n                                <Button onClick={() => deleteProject(project.projectIdentifier)}>\n                                    <li className=\"list-group-item delete\">\n                                        <i className=\"fa fa-minus-circle pr-1\">Delete Project</i>\n                                    </li>\n                                </Button>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func,\n    project: PropTypes.object\n}\n\nconst mapDispatchToProps = {\n    deleteProject\n}\n\nexport default connect(null, mapDispatchToProps)(ProjectItem)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst CreateProjectButton = () => (\n    <React.Fragment>\n        <Link to=\"/addProject\" className=\"t-create-project-button btn btn-lg btn-info\">Create a Project</Link>\n    </React.Fragment>\n)\n\nexport default CreateProjectButton\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport PropTypes from 'prop-types'\nimport template from '../../template'\n\nimport ProjectItem from './partials/ProjectItem'\nimport CreateProjectButton from './partials/CreateProjectButton'\n\nimport { getProjectsList } from '../../store/project/selectors'\n\nclass Dashboard extends Component {\n    render() {\n        const { projects } = this.props\n        return (\n            <div className=\"t-dashboard projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br />\n                            <CreateProjectButton />\n                            <br />\n                            <hr />\n                            {projects.map((project, idx) => <ProjectItem key={idx} project={project} />)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nDashboard.propTypes = {\n    projects: PropTypes.array\n}\n\nconst mapStateToProps = createPropsSelector({\n    projects: getProjectsList\n})\n\nexport default template(connect(mapStateToProps)(Dashboard))\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { Link } from 'react-router-dom'\nimport Button from '../../../components/button'\n\nimport { deleteProject } from '../actions'\n\nconst ProjecTask = ({ projectSequence, summary, acceptanceCriteria, priority, deleteProject, projectIdentifier }) => {\n    let priorityClass = ''\n    let priorityString = ''\n    if (priority === 1) {\n        priorityClass = 'bg-danger text-light'\n        priorityString = 'HIGH'\n    } else if (priority === 2) {\n        priorityClass = 'bg-warning text-light'\n        priorityString = 'MEDIUM'\n    } else if (priority === 3) {\n        priorityClass = 'bg-info text-light'\n        priorityString = 'LOW'\n    }\n    return (\n        <div className=\"t-project-task\">\n            <div className=\"card mb-1 bg-light\">\n                <div className={`card-header text-primary ${priorityClass}`}>ID: {projectSequence} -- Priority: {priorityString}</div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{summary}</h5>\n                    <p className=\"card-text text-truncate \">{acceptanceCriteria}</p>\n                    <Link to={`/addProjectTask/${projectIdentifier}/${projectSequence}`} className=\"btn btn-primary\">View / Update</Link>\n                    <Button onClick={() => { deleteProject(projectIdentifier, projectSequence) }} className=\"btn btn-danger ml-4\">Delete</Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nProjecTask.propTypes = {\n    deleteProject: PropTypes.func,\n    projectSequence: PropTypes.string,\n    summary: PropTypes.string,\n    acceptanceCriteria: PropTypes.string,\n    priority: PropTypes.number,\n    projectIdentifier: PropTypes.string\n}\n\nconst mapDispatchToProps = {\n    deleteProject\n}\n\nexport default connect(null, mapDispatchToProps)(ProjecTask)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ProjectTask from './ProjectTask'\n\nclass Backlog extends Component {\n    render() {\n        const { tasksList } = this.props\n        const todoTasks = []\n        const inProgressTasks = []\n        const doneTasks = []\n        tasksList && tasksList.forEach((task, idx) => {\n            if (task.status === 'IN_PROGRESS') {\n                inProgressTasks.push(<ProjectTask key={idx} {...task} />)\n            } else if (task.status === 'DONE') {\n                doneTasks.push(<ProjectTask key={idx} {...task} />)\n            } else {\n                todoTasks.push(<ProjectTask key={idx} {...task} />)\n            }\n        })\n        return (\n            <div className=\"t-backlog\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-secondary text-white\">\n                                    <h3>TO DO</h3>\n                                </div>\n                            </div>\n                            {todoTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-primary text-white\">\n                                    <h3>In Progress</h3>\n                                </div>\n                            </div>\n                            {inProgressTasks}\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"card text-center mb-2\">\n                                <div className=\"card-header bg-success text-white\">\n                                    <h3>Done</h3>\n                                </div>\n                            </div>\n                            {doneTasks}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nBacklog.propTypes = {\n    tasksList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number,\n        projectSequence: PropTypes.string,\n        summary: PropTypes.string,\n        acceptanceCriteria: PropTypes.string,\n        status: PropTypes.string,\n        priority: PropTypes.number,\n        dueDate: PropTypes.string,\n        created_At: PropTypes.string,\n        updated_At: PropTypes.string,\n        projectIdentifier: PropTypes.string\n    }))\n}\n\nexport default Backlog\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport PropTypes from 'prop-types'\n\nimport { Link } from 'react-router-dom'\nimport template from '../../template'\nimport Backlog from './partials/Backlog'\nimport { getCurrentTaskList, getProjectNotFoundError } from './selectors'\nimport { setCurrentTaskList } from './actions'\n\nclass ProjectBoard extends Component {\n    render() {\n        const { tasksList, match, projectNotFoundError } = this.props\n        return (\n            <div className=\"t-project-board\">\n                {!projectNotFoundError ?\n                    <div className=\"container\">\n                        <Link to={`/addProjectTask/${match.params.id}`} className=\"btn btn-primary mb-3\">\n                            <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                        </Link>\n                        <br />\n                        <hr />\n                        {tasksList && tasksList.length ?\n                            <Backlog tasksList={tasksList} />\n                            :\n                            <div className=\"alert alert-info text-center\">No Project Tasks on this board</div>\n                        }\n                    </div>\n                    :\n                    <div className=\"alert alert-danger text-center container\">{projectNotFoundError}</div>\n                }\n            </div >\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    projectNotFoundError: PropTypes.string,\n    tasksList: PropTypes.array,\n    setCurrentTaskList: PropTypes.func\n}\n\nconst mapStateToProps = createPropsSelector({\n    tasksList: getCurrentTaskList,\n    projectNotFoundError: getProjectNotFoundError\n})\n\nconst mapDispatchToProps = {\n    setCurrentTaskList\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(ProjectBoard))\n","import { createSelector } from 'reselect'\nimport { createGetSelector } from 'reselect-immutable-helpers'\n\nimport { getUi } from '../../store/selectors'\n\nexport const getProjectTask = createSelector(getUi, ({ projectTask }) => projectTask)\nexport const getCurrentProject = createGetSelector(getProjectTask, 'currentProject')\nexport const getCurrentTask = createGetSelector(getProjectTask, 'currentTask')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport { Link } from 'react-router-dom'\nimport template from '../../template'\n\nimport { ADD_PROJECT_FORM_TASK } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { addProjectTask, setCurrentTask } from './actions'\nimport { getCurrentTask } from './selectors'\n\nclass AddProjectTask extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    componentWillUnmount() {\n        this.props.setCurrentTask({ currentTask: null })\n    }\n\n    onSubmit(formValues) {\n        const { history, addProjectTask, match, initialValues } = this.props\n        formValues.isUpdate = initialValues !== null\n        return addProjectTask(formValues, match.params.id, history)\n    }\n\n    render() {\n        const { error, handleSubmit, match } = this.props\n        return (\n            <div className=\"t-add-project-task\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${match.params.id}`} className=\"btn btn-light\">Back to Project Board</Link>\n                            <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form id={ADD_PROJECT_FORM_TASK} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Project Task Summary\" name=\"summary\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"textarea\" placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"date\" label=\"Due Date\" name=\"dueDate\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"select\" name=\"priority\">\n                                        <select className=\"form-control form-control-lg\">\n                                            <option value={0}>Select Priority</option>\n                                            <option value={1}>High</option>\n                                            <option value={2}>Medium</option>\n                                            <option value={3}>Low</option>\n                                        </select>\n                                    </FormField>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <FormField type=\"select\" name=\"status\">\n                                        <select className=\"form-control form-control-lg\">\n                                            <option value=\"\">Select Status</option>\n                                            <option value=\"TO_DO\">TO DO</option>\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                            <option value=\"DONE\">DONE</option>\n                                        </select>\n                                    </FormField>\n                                </div>\n\n                                <Button type=\"submit\" className=\"btn btn-primary btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func,\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    initialValues: PropTypes.object,\n    setCurrentTask: PropTypes.func\n}\n\nconst AddProjectTaskForm = reduxForm({\n    form: ADD_PROJECT_FORM_TASK\n})(AddProjectTask)\n\nconst mapStateToProps = createPropsSelector({\n    initialValues: getCurrentTask\n})\n\nconst mapDispatchToProps = {\n    addProjectTask,\n    setCurrentTask\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(AddProjectTaskForm))\n","import React, { PureComponent } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nexport default class Home extends PureComponent {\n    render() {\n        return (\n            <div className=\"t-home\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Spring React Start Client</h1>\n                                <p className=\"lead\">Create your account to join active projects or start you own</p>\n                                <hr />\n                                <Link to=\"/register.html\" className=\"btn btn-lg btn-primary mr-2\">Sign Up</Link>\n                                <Link to=\"/login.html\" className=\"btn btn-lg btn-secondary mr-2\">Login</Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport template from '../../template'\n\nimport { LOGIN_FORM } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { login } from './actions'\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onSubmit(formValues) {\n        const { history, login } = this.props\n        return login(formValues, history)\n    }\n\n    render() {\n        const { handleSubmit, error } = this.props\n\n        return (\n            <div className=\"t-login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form id={LOGIN_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n\n                                <div className=\"form-group\">\n                                    <FormField type=\"email\" placeholder=\"Email Address\" name=\"username\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Password\" name=\"password\" />\n                                </div>\n                                <Button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    login: PropTypes.func\n}\n\nconst LoginForm = reduxForm({\n    form: LOGIN_FORM\n})(Login)\n\nconst mapStateToProps = createPropsSelector({\n\n})\n\nconst mapDispatchToProps = {\n    login\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(LoginForm))\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { createPropsSelector } from 'reselect-immutable-helpers'\nimport template from '../../template'\n\nimport { REGISTER_FORM } from '../../store/form/constants'\n\nimport Button from '../../components/button'\nimport FormField from '../../components/form-field'\n\nimport { registerUser } from './actions'\n\nclass Register extends Component {\n    constructor(props) {\n        super(props)\n\n        this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onSubmit(formValues) {\n        const { history, registerUser } = this.props\n        return registerUser(formValues, history)\n    }\n\n    render() {\n        const { handleSubmit, error } = this.props\n\n        return (\n            <div className=\"t-register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form id={REGISTER_FORM} onSubmit={handleSubmit(this.onSubmit)} noValidate={true}>\n                                {error &&\n                                    <div className=\"u-margin-start-md u-margin-bottom-md u-color-error\">\n                                        {error}\n                                    </div>\n                                }\n                                <div className=\"form-group\">\n                                    <FormField type=\"text\" placeholder=\"Name\" name=\"fullName\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"email\" placeholder=\"Email Address\" name=\"username\" />\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Password\" name=\"password\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <FormField type=\"password\" placeholder=\"Confirm Password\"\n                                        name=\"confirmPassword\" />\n                                </div>\n                                <Button type=\"submit\" className=\"btn btn-info btn-block mt-4\">Submit</Button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nRegister.propTypes = {\n    error: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    registerUser: PropTypes.func\n}\n\nconst RegisterForm = reduxForm({\n    form: REGISTER_FORM\n})(Register)\n\nconst mapStateToProps = createPropsSelector({\n\n})\n\nconst mapDispatchToProps = {\n    registerUser\n}\n\nexport default template(connect(mapStateToProps, mapDispatchToProps)(RegisterForm))\n","import React, { Component } from 'react'\n\nexport default class NotFound extends Component {\n    render() {\n        return (\n            <div>\n                Not Found\n            </div>\n        )\n    }\n}\n","export const initHome = () => (dispatch) => Promise.resolve() // eslint-disable-line import/prefer-default-export\n// There will be other exports usually\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './containers/app/App'\nimport AddProject from './containers/add-project/AddProject'\nimport Dashboard from './containers/dashboard/Dashboard'\nimport ProjectBoard from './containers/project-board/ProjectBoard'\nimport AddProjectTask from './containers/add-project-task/AddProjectTask'\nimport Home from './containers/home/Home'\nimport Login from './containers/user-management/Login'\nimport Register from './containers/user-management/Register'\nimport NotFound from './containers/not-found/NotFound'\n\nimport { initAddProject } from './containers/add-project/actions'\nimport { initDashboard } from './containers/dashboard/actions'\nimport { initProjectBoard } from './containers/project-board/actions'\nimport { initAddProjectTask } from './containers/add-project-task/actions'\nimport { initHome } from './containers/home/actions'\nimport { initLogin, initRegister } from './containers/user-management/actions'\n\nexport default class Router extends Component {\n    render() {\n        const { store } = this.props\n        // TODO Think about creating a secured route and a custom route so the router looks cleaner.. just a maybe\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/\" render={(routeProps) => <Home dispatch={store.dispatch} {...routeProps} fetchAction={initHome} />} />\n                            <Route exact path=\"/login(.html)?\" render={(routeProps) => <Login dispatch={store.dispatch} {...routeProps} fetchAction={initLogin} />} />\n                            <Route exact path=\"/register(.html)?\" render={(routeProps) => <Register dispatch={store.dispatch} {...routeProps} fetchAction={initRegister} />} />\n                            <Route exact path=\"/dashboard(.html)?\" render={(routeProps) => <Dashboard dispatch={store.dispatch} {...routeProps} fetchAction={initDashboard} />} />\n                            <Route exact path=\"/addProject/:id?\" render={(routeProps) => <AddProject dispatch={store.dispatch} {...routeProps} fetchAction={initAddProject} />} />\n                            <Route exact path=\"/projectBoard/:id?\" render={(routeProps) => <ProjectBoard dispatch={store.dispatch} {...routeProps} fetchAction={initProjectBoard} />} />\n                            <Route exact path=\"/addProjectTask/:id?/:sequence?\"\n                                render={(routeProps) => <AddProjectTask dispatch={store.dispatch} {...routeProps} fetchAction={initAddProjectTask} />} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </App>\n                </BrowserRouter>\n            </Provider>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store'\nimport Router from './Router'\n\nReactDOM.render(<Router store={store} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}